{"version":3,"sources":["index.js","../src/utils.ts","../src/codeblockcommand.ts","../src/indentcodeblockcommand.ts","../src/outdentcodeblockcommand.ts","../src/converters.ts","../src/codeblockediting.ts","../src/codeblockui.ts","../src/codeblock.ts"],"names":["getNormalizedAndLocalizedLanguageDefinitions","editor","t","languageDefs","config","get","def","label","class","undefined","language","getPropertyAssociation","key","value","association","newKey","split","shift","getLeadingWhiteSpaces","textNode","data","match","rawSnippetTextToViewDocumentFragment","writer","text","fragment","createDocumentFragment","textLines","items","reduce","nodes","line","lineIndex","push","length","createElement","appendChild","getIndentOutdentPositions","model","selection","document","positions","isCollapsed","anchor","walker","getFirstRange","getWalker","ignoreElementEnd","direction","item","node","is","parent","previousSibling","startOffset","position","createPositionAt","every","pos","isEqual","isModelSelectionInCodeBlock","firstBlock","first","getSelectedBlocks","canBeCodeBlock","schema","element","isLimit","checkChild","getCodeBlockAriaAnnouncement","languagesToLabels","codeBlockLanguage","getAttribute","getTextNodeAtLineStart","createPositionBefore","nodeBefore","nodeAtStart","nodeAfter","CodeBlockCommand","Command","_lastLanguage","refresh","_getValue","isEnabled","_checkEnabled","execute","options","normalizedLanguagesDefs","firstLanguageInConfig","blocks","Array","from","forceValue","getLanguage","change","_applyCodeBlock","_removeCodeBlock","isCodeBlock","allowedBlocks","filter","block","rename","setAttribute","removeDisallowedAttributes","getChildren","child","forEach","remove","reverse","currentBlock","i","nextBlock","appendElement","merge","codeBlocks","range","createRangeOn","getItems","elementAfter","removeAttribute","lastLanguage","defaultLanguage","usePreviousLanguageChoice","IndentCodeBlockCommand","_indentSequence","indentSequenceTextElement","createText","insertContent","OutdentCodeBlockCommand","getLastOutdentableSequenceRange","deleteContent","createSelection","some","sequence","nodeAtPosition","leadingWhiteSpaces","lastIndexOfSequence","lastIndexOf","createRange","modelToViewCodeBlockInsertion","useLabels","languagesToClasses","evt","conversionApi","mapper","consumable","consume","targetViewPosition","toViewPosition","preAttributes","spellcheck","codeAttributes","code","createContainerElement","pre","insert","bindElements","modelToDataViewSoftBreakInsertion","name","dataViewToModelCodeBlockInsertion","editingView","classesToLanguages","defaultLanguageName","viewCodeElement","viewItem","viewPreElement","modelCursor","findAncestor","test","codeBlock","viewChildClasses","getClassNames","className","classes","hasAttribute","convertChildren","safeInsert","updateConversionResult","dataViewToModelTextNewlinesInsertion","map","lastLine","getShiftedBy","offsetSize","softBreak","createPositionAfter","modelRange","dataViewToModelOrphanNodeConsumer","preElement","preChildren","childCodeElement","find","DEFAULT_ELEMENT","CodeBlockEditing","Plugin","pluginName","isOfficialPlugin","requires","ShiftEnter","define","languages","indentSequence","init","view","editing","commands","add","listenTo","commandName","shiftKey","command","stopPropagation","preventDefault","stop","context","register","allowWhere","allowChildren","disallowChildren","allowAttributes","allowAttributesOf","isBlock","addAttributeCheck","attributeName","getItem","isFormatting","getAttributeProperties","downcastDispatcher","on","priority","upcastDispatcher","insertionRange","targetRanges","toModelRange","start","dataTransfer","getData","ViewUpcastWriter","content","plugins","has","ClipboardPipeline","contentRange","createRangeIn","hasSameParentAs","focus","docFragment","return","childCount","containsEntireContent","getAttributes","append","newDocumentFragment","getChild","checkAttribute","afterInit","indent","outdent","registerChildCommand","positionParent","getLastPosition","leaveBlockStartOnEnter","isSoft","leaveBlockEndOnEnter","breakLineOnEnter","_initAriaAnnouncements","ui","lastFocusedCodeBlock","focusParent","ariaLiveAnnouncer","announce","modelDoc","lastSelectionPosition","insertText","isSoftEnter","isAtStart","isSoftBreakNode","newBlock","setSelection","scrollToTheSelection","emptyLineRangeToRemoveOnEnter","isAtEnd","isEmptyishTextNode","CodeBlockUI","componentFactory","normalizedLanguageDefs","itemDefinitions","_getLanguageListItemDefinitions","locale","dropdownView","createDropdown","SplitButtonView","splitButtonView","buttonView","accessibleLabel","set","tooltip","icon","IconCodeBlock","isToggleable","bind","to","source","_codeBlockLanguage","addListToDropdown","role","ariaLabel","menuView","MenuBarMenuView","listView","MenuBarMenuListView","definition","listItemView","MenuBarMenuListItemView","MenuBarMenuListItemButtonView","Object","keys","delegate","children","panelView","Collection","languageDef","type","UIModel","withText","CodeBlock"],"mappings":"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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;AAC9F,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;AAC9F,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;AAC9F,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS;AAC3G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;AAC3G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;AAC3G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;AAC3G,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AACtG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AACtG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS;AACzG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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","file":"index.js.map","sourcesContent":["import { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ShiftEnter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { ViewUpcastWriter } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { first, Collection } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { createDropdown, SplitButtonView, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, UIModel } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { IconCodeBlock } from '@ckeditor/ckeditor5-icons/dist/index.js';\n\n/**\n * Returns code block languages as defined in `config.codeBlock.languages` but processed:\n *\n * * To consider the editor localization, i.e. to display {@link module:code-block/codeblockconfig~CodeBlockLanguageDefinition}\n * in the correct language. There is no way to use {@link module:utils/locale~Locale#t} when the user\n * configuration is defined because the editor does not exist yet.\n * * To make sure each definition has a CSS class associated with it even if not specified\n * in the original configuration.\n *\n * @internal\n */ function getNormalizedAndLocalizedLanguageDefinitions(editor) {\n    const t = editor.t;\n    const languageDefs = editor.config.get('codeBlock.languages');\n    for (const def of languageDefs){\n        if (def.label === 'Plain text') {\n            def.label = t('Plain text');\n        }\n        if (def.class === undefined) {\n            def.class = `language-${def.language}`;\n        }\n    }\n    return languageDefs;\n}\n/**\n * Returns an object associating certain language definition properties with others. For instance:\n *\n * For:\n *\n * ```ts\n * const definitions = {\n * \t{ language: 'php', class: 'language-php', label: 'PHP' },\n * \t{ language: 'javascript', class: 'js', label: 'JavaScript' },\n * };\n *\n * getPropertyAssociation( definitions, 'class', 'language' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'language-php': 'php',\n * \t'js': 'javascript'\n * }\n * ```\n *\n * and\n *\n * ```ts\n * getPropertyAssociation( definitions, 'language', 'label' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'php': 'PHP',\n * \t'javascript': 'JavaScript'\n * }\n * ```\n *\n * @internal\n */ function getPropertyAssociation(languageDefs, key, value) {\n    const association = {};\n    for (const def of languageDefs){\n        if (key === 'class') {\n            // Only the first class is considered.\n            const newKey = def[key].split(' ').shift();\n            association[newKey] = def[value];\n        } else {\n            association[def[key]] = def[value];\n        }\n    }\n    return association;\n}\n/**\n * For a given model text node, it returns white spaces that precede other characters in that node.\n * This corresponds to the indentation part of the code block line.\n *\n * @internal\n */ function getLeadingWhiteSpaces(textNode) {\n    return textNode.data.match(/^(\\s*)/)[0];\n}\n/**\n * For plain text containing the code (a snippet), it returns a document fragment containing\n * view text nodes separated by `<br>` elements (in place of new line characters \"\\n\"), for instance:\n *\n * Input:\n *\n * ```ts\n * \"foo()\\n\n * bar()\"\n * ```\n *\n * Output:\n *\n * ```html\n * <DocumentFragment>\n * \t\"foo()\"\n * \t<br/>\n * \t\"bar()\"\n * </DocumentFragment>\n * ```\n *\n * @param text The raw code text to be converted.\n * @internal\n */ function rawSnippetTextToViewDocumentFragment(writer, text) {\n    const fragment = writer.createDocumentFragment();\n    const textLines = text.split('\\n');\n    const items = textLines.reduce((nodes, line, lineIndex)=>{\n        nodes.push(line);\n        if (lineIndex < textLines.length - 1) {\n            nodes.push(writer.createElement('br'));\n        }\n        return nodes;\n    }, []);\n    writer.appendChild(items, fragment);\n    return fragment;\n}\n/**\n * Returns an array of all model positions within the selection that represent code block lines.\n *\n * If the selection is collapsed, it returns the exact selection anchor position:\n *\n * ```html\n * <codeBlock>[]foo</codeBlock>        ->     <codeBlock>^foo</codeBlock>\n * <codeBlock>foo[]bar</codeBlock>     ->     <codeBlock>foo^bar</codeBlock>\n * ```\n *\n * Otherwise, it returns positions **before** each text node belonging to all code blocks contained by the selection:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n *     <softBreak></softBreak>         ->        <softBreak></softBreak>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * It also works across other non–code blocks:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n * </codeBlock>                               </codeBlock>\n * <paragraph>text</paragraph>         ->     <paragraph>text</paragraph>\n * <codeBlock>                                <codeBlock>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * **Note:** The positions are in reverse order so they do not get outdated when iterating over them and\n * the writer inserts or removes elements at the same time.\n *\n * **Note:** The position is located after the leading white spaces in the text node.\n *\n * @internal\n */ function getIndentOutdentPositions(model) {\n    const selection = model.document.selection;\n    const positions = [];\n    // When the selection is collapsed, there's only one position we can indent or outdent.\n    if (selection.isCollapsed) {\n        return [\n            selection.anchor\n        ];\n    }\n    // When the selection is NOT collapsed, collect all positions starting before text nodes\n    // (code lines) in any <codeBlock> within the selection.\n    // Walk backward so positions we are about to collect here do not get outdated when\n    // inserting or deleting using the writer.\n    const walker = selection.getFirstRange().getWalker({\n        ignoreElementEnd: true,\n        direction: 'backward'\n    });\n    for (const { item } of walker){\n        let node = item.is('$textProxy') ? item.textNode : item;\n        const parent = node.parent;\n        if (!parent.is('element', 'codeBlock') || node.is('element', 'softBreak')) {\n            continue;\n        }\n        // For each item in code block, move backwards until the beginning of the line it is in is found.\n        while(node.previousSibling && !node.previousSibling.is('element', 'softBreak')){\n            node = node.previousSibling;\n        }\n        // Take the leading white spaces into account (only for text nodes).\n        const startOffset = !node.is('$text') ? node.startOffset : node.startOffset + getLeadingWhiteSpaces(node).length;\n        const position = model.createPositionAt(parent, startOffset);\n        // Do not add the same position twice. Unfortunately using set doesn't deduplicate positions because\n        // they are different objects.\n        if (positions.every((pos)=>!pos.isEqual(position))) {\n            positions.push(position);\n        }\n    }\n    return positions;\n}\n/**\n * Checks if any of the blocks within the model selection is a code block.\n *\n * @internal\n */ function isModelSelectionInCodeBlock(selection) {\n    const firstBlock = first(selection.getSelectedBlocks());\n    return !!firstBlock && firstBlock.is('element', 'codeBlock');\n}\n/**\n * Checks if an {@link module:engine/model/element~ModelElement Element} can become a code block.\n *\n * @param schema Model's schema.\n * @param element The element to be checked.\n * @returns Check result.\n * @internal\n */ function canBeCodeBlock(schema, element) {\n    if (element.is('rootElement') || schema.isLimit(element)) {\n        return false;\n    }\n    return schema.checkChild(element.parent, 'codeBlock');\n}\n/**\n * Get the translated message read by the screen reader when you enter or exit an element with your cursor.\n *\n * @internal\n */ function getCodeBlockAriaAnnouncement(t, languageDefs, element, direction) {\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    const codeBlockLanguage = element.getAttribute('language');\n    if (codeBlockLanguage in languagesToLabels) {\n        const language = languagesToLabels[codeBlockLanguage];\n        if (direction === 'enter') {\n            return t('Entering %0 code snippet', language);\n        }\n        return t('Leaving %0 code snippet', language);\n    }\n    if (direction === 'enter') {\n        return t('Entering code snippet');\n    }\n    return t('Leaving code snippet');\n}\n/**\n * For given position, finds the closest position that is at the beginning of a line of code and returns a text node that is at the\n * beginning of the line (or `null` if there's no text node at the beginning of a given line).\n *\n * Line beings at the start of a code block element and after each `softBreak` element.\n *\n * Note: even though code block doesn't allow inline elements other than `<softBreak>` by default, some features may overwrite this rule,\n * so such inline elements are taken into account.\n *\n * Some examples of expected results:\n *\n * ```\n * <codeBlock>^</codeBlock>                                ->   null\n * <codeBlock>^foobar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foobar^</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^bar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^<softBreak />bar</codeBlock>             ->   <codeBlock>[foo]<softBreak />bar</codeBlock>\n * <codeBlock>foo<softBreak />bar^</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />b^ar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />^bar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>^<element /></codeBlock>                     ->   null\n * <codeBlock><element />^</codeBlock>                     ->   null\n * <codeBlock>foo^<element /></codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />^</codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />bar^</codeBlock>               ->   <codeBlock>[foo]<element />bar</codeBlock>\n * <codeBlock><element />bar^</codeBlock>                  ->   null\n * <codeBlock>foo<softBreak />^<softBreak /></codeBlock>   ->   null\n * <codeBlock>foo<softBreak />^<element /></codeBlock>     ->   null\n * <codeBlock>foo<softBreak /><element />^</codeBlock>     ->   null\n * <codeBlock>foo<softBreak />bar<element />^</codeBlock>  ->   <codeBlock>foo<softBreak />[bar]<element /></codeBlock>\n * <codeBlock>foo<softBreak /><element />ba^r</codeBlock>  ->   null\n * ```\n *\n * @internal\n */ function getTextNodeAtLineStart(position, model) {\n    // First, move position before a text node, if it is inside a text node.\n    if (position.textNode) {\n        position = model.createPositionBefore(position.textNode);\n    }\n    // Then, jump-back the position until it is before a `softBreak` or at the beginning of the `codeBlock`.\n    while(position.nodeBefore && !position.nodeBefore.is('element', 'softBreak')){\n        position = model.createPositionBefore(position.nodeBefore);\n    }\n    // Now, the position is at the beginning of a line.\n    // Return a text node after the position, if there is one.\n    const nodeAtStart = position.nodeAfter;\n    return nodeAtStart && nodeAtStart.is('$text') ? nodeAtStart : null;\n}\n\n/**\n * The code block command plugin.\n */ class CodeBlockCommand extends Command {\n    /**\n\t * Contains the last used language.\n\t */ _lastLanguage;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._lastLanguage = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n\t * the selection will be removed. If it is off, all selected blocks will be flattened and\n\t * wrapped by a code block.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.language The code block language.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a code block,\n\t * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n\t * @param options.usePreviousLanguageChoice If set on `true` and the `options.language` is not specified, the command\n\t * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const firstLanguageInConfig = normalizedLanguagesDefs[0];\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const value = options.forceValue == undefined ? !this.value : options.forceValue;\n        const language = getLanguage(options, this._lastLanguage, firstLanguageInConfig.language);\n        model.change((writer)=>{\n            if (value) {\n                this._applyCodeBlock(writer, blocks, language);\n            } else {\n                this._removeCodeBlock(writer, blocks);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const selection = this.editor.model.document.selection;\n        const firstBlock = first(selection.getSelectedBlocks());\n        const isCodeBlock = !!firstBlock?.is('element', 'codeBlock');\n        return isCodeBlock ? firstBlock.getAttribute('language') : false;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        return canBeCodeBlock(schema, firstBlock);\n    }\n    _applyCodeBlock(writer, blocks, language) {\n        this._lastLanguage = language;\n        const schema = this.editor.model.schema;\n        const allowedBlocks = blocks.filter((block)=>canBeCodeBlock(schema, block));\n        for (const block of allowedBlocks){\n            writer.rename(block, 'codeBlock');\n            writer.setAttribute('language', language, block);\n            schema.removeDisallowedAttributes([\n                block\n            ], writer);\n            // Remove children of the  `codeBlock` element that are not allowed. See #9567.\n            Array.from(block.getChildren()).filter((child)=>!schema.checkChild(block, child)).forEach((child)=>writer.remove(child));\n        }\n        allowedBlocks.reverse().forEach((currentBlock, i)=>{\n            const nextBlock = allowedBlocks[i + 1];\n            if (currentBlock.previousSibling === nextBlock) {\n                writer.appendElement('softBreak', nextBlock);\n                writer.merge(writer.createPositionBefore(currentBlock));\n            }\n        });\n    }\n    _removeCodeBlock(writer, blocks) {\n        const codeBlocks = blocks.filter((block)=>block.is('element', 'codeBlock'));\n        for (const block of codeBlocks){\n            const range = writer.createRangeOn(block);\n            for (const item of Array.from(range.getItems()).reverse()){\n                if (item.is('element', 'softBreak') && item.parent.is('element', 'codeBlock')) {\n                    const { position } = writer.split(writer.createPositionBefore(item));\n                    const elementAfter = position.nodeAfter;\n                    writer.rename(elementAfter, 'paragraph');\n                    writer.removeAttribute('language', elementAfter);\n                    writer.remove(item);\n                }\n            }\n            writer.rename(block, 'paragraph');\n            writer.removeAttribute('language', block);\n        }\n    }\n}\n/**\n * Picks the language for the new code block. If any language is passed as an option,\n * it will be returned. Else, if option usePreviousLanguageChoice is true and some\n * code block was already created (lastLanguage is not null) then previously used\n * language will be returned. If not, it will return default language.\n */ function getLanguage(options, lastLanguage, defaultLanguage) {\n    if (options.language) {\n        return options.language;\n    }\n    if (options.usePreviousLanguageChoice && lastLanguage) {\n        return lastLanguage;\n    }\n    return defaultLanguage;\n}\n\n/**\n * The code block indentation increase command plugin.\n */ class IndentCodeBlockCommand extends Command {\n    /**\n\t * A sequence of characters added to the line when the command is executed.\n\t */ _indentSequence;\n    constructor(editor){\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be increased.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change((writer)=>{\n            const positions = getIndentOutdentPositions(model);\n            // Indent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>        ->       <codeBlock>    foo</codeBlock>\n            //\n            //\t\t<codeBlock>foo^bar</codeBlock>     ->       <codeBlock>foo    bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    bazqux\n            //\t\t</codeBlock>\n            //\n            for (const position of positions){\n                const indentSequenceTextElement = writer.createText(this._indentSequence);\n                // Previously insertion was done by writer.insertText(). It was changed to insertContent() to enable\n                // integration of code block with track changes. It's the easiest way of integration because insertContent()\n                // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                // some additional work will be required in track changes integration of code block.\n                model.insertContent(indentSequenceTextElement, position);\n            }\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t */ _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        // Indent (forward) command is always enabled when there's any code block in the selection\n        // because you can always indent code lines.\n        return isModelSelectionInCodeBlock(this.editor.model.document.selection);\n    }\n}\n\n/**\n * The code block indentation decrease command plugin.\n */ class OutdentCodeBlockCommand extends Command {\n    /**\n\t * A sequence of characters removed from the line when the command is executed.\n\t */ _indentSequence;\n    constructor(editor){\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be decreased.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change(()=>{\n            const positions = getIndentOutdentPositions(model);\n            // Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n            //\n            //\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    ^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    ^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\tfoobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\tbazqux\n            //\t\t</codeBlock>\n            for (const position of positions){\n                const range = getLastOutdentableSequenceRange(model, position, this._indentSequence);\n                if (range) {\n                    // Previously deletion was done by writer.remove(). It was changed to deleteContent() to enable\n                    // integration of code block with track changes. It's the easiest way of integration because deleteContent()\n                    // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                    // some additional work will be required in track changes integration of code block.\n                    model.deleteContent(model.createSelection(range));\n                }\n            }\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        const model = this.editor.model;\n        if (!isModelSelectionInCodeBlock(model.document.selection)) {\n            return false;\n        }\n        // Outdent command can execute only when there is an indent character sequence\n        // in some of the lines.\n        return getIndentOutdentPositions(model).some((position)=>{\n            return getLastOutdentableSequenceRange(model, position, this._indentSequence);\n        });\n    }\n}\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~ModelPosition>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~ModelRange>|null}\nfunction getLastOutdentableSequenceRange(model, position, sequence) {\n    // Positions start before each text node (code line). Get the node corresponding to the position.\n    const nodeAtPosition = getTextNodeAtLineStart(position, model);\n    if (!nodeAtPosition) {\n        return null;\n    }\n    const leadingWhiteSpaces = getLeadingWhiteSpaces(nodeAtPosition);\n    const lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf(sequence);\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length) {\n        return null;\n    }\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence === -1) {\n        return null;\n    }\n    const { parent, startOffset } = nodeAtPosition;\n    // Create a range that contains the **last** indent sequence among the leading whitespaces\n    // of the line.\n    //\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n    //\n    return model.createRange(model.createPositionAt(parent, startOffset + lastIndexOfSequence), model.createPositionAt(parent, startOffset + lastIndexOfSequence + sequence.length));\n}\n\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output (editing):\n *\n * ```html\n * <pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n * ```\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @param useLabels When `true`, the `<pre>` element will get a `data-language` attribute with a\n * human–readable label of the language. Used only in the editing.\n * @returns Returns a conversion callback.\n * @internal\n */ function modelToViewCodeBlockInsertion(model, languageDefs, useLabels = false) {\n    // Language CSS classes:\n    //\n    //\t\t{\n    //\t\t\tphp: 'language-php',\n    //\t\t\tpython: 'language-python',\n    //\t\t\tjavascript: 'js',\n    //\t\t\t...\n    //\t\t}\n    const languagesToClasses = getPropertyAssociation(languageDefs, 'language', 'class');\n    // Language labels:\n    //\n    //\t\t{\n    //\t\t\tphp: 'PHP',\n    //\t\t\tpython: 'Python',\n    //\t\t\tjavascript: 'JavaScript',\n    //\t\t\t...\n    //\t\t}\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const codeBlockLanguage = data.item.getAttribute('language');\n        const targetViewPosition = mapper.toViewPosition(model.createPositionBefore(data.item));\n        const preAttributes = {};\n        // Attributes added only in the editing view.\n        if (useLabels) {\n            preAttributes['data-language'] = languagesToLabels[codeBlockLanguage];\n            preAttributes.spellcheck = 'false';\n        }\n        const codeAttributes = languagesToClasses[codeBlockLanguage] ? {\n            class: languagesToClasses[codeBlockLanguage]\n        } : undefined;\n        const code = writer.createContainerElement('code', codeAttributes);\n        const pre = writer.createContainerElement('pre', preAttributes, code);\n        writer.insert(targetViewPosition, pre);\n        mapper.bindElements(data.item, code);\n    };\n}\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <pre><code ...>foo();\\nbar();</code></pre>\n * ```\n *\n * @returns Returns a conversion callback.\n * @internal\n */ function modelToDataViewSoftBreakInsertion(model) {\n    return (evt, data, conversionApi)=>{\n        if (data.item.parent.name !== 'codeBlock') {\n            return;\n        }\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const position = mapper.toViewPosition(model.createPositionBefore(data.item));\n        writer.insert(position, writer.createText('\\n'));\n    };\n}\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();bar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();bar();</codeBlock>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @returns Returns a conversion callback.\n * @internal\n */ function dataViewToModelCodeBlockInsertion(editingView, languageDefs) {\n    // Language names associated with CSS classes:\n    //\n    //\t\t{\n    //\t\t\t'language-php': 'php',\n    //\t\t\t'language-python': 'python',\n    //\t\t\tjs: 'javascript',\n    //\t\t\t...\n    //\t\t}\n    const classesToLanguages = getPropertyAssociation(languageDefs, 'class', 'language');\n    const defaultLanguageName = languageDefs[0].language;\n    return (evt, data, conversionApi)=>{\n        const viewCodeElement = data.viewItem;\n        const viewPreElement = viewCodeElement.parent;\n        if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n            return;\n        }\n        // In case of nested code blocks we don't want to convert to another code block.\n        if (data.modelCursor.findAncestor('codeBlock')) {\n            return;\n        }\n        const { consumable, writer } = conversionApi;\n        if (!consumable.test(viewCodeElement, {\n            name: true\n        })) {\n            return;\n        }\n        const codeBlock = writer.createElement('codeBlock');\n        const viewChildClasses = [\n            ...viewCodeElement.getClassNames()\n        ];\n        // As we're to associate each class with a model language, a lack of class (empty class) can be\n        // also associated with a language if the language definition was configured so. Pushing an empty\n        // string to make sure the association will work.\n        if (!viewChildClasses.length) {\n            viewChildClasses.push('');\n        }\n        // Figure out if any of the <code> element's class names is a valid programming\n        // language class. If so, use it on the model element (becomes the language of the entire block).\n        for (const className of viewChildClasses){\n            const language = classesToLanguages[className];\n            if (language) {\n                consumable.consume(viewCodeElement, {\n                    classes: [\n                        className\n                    ]\n                });\n                writer.setAttribute('language', language, codeBlock);\n                break;\n            }\n        }\n        // If no language value was set, use the default language from the config.\n        if (!codeBlock.hasAttribute('language')) {\n            writer.setAttribute('language', defaultLanguageName, codeBlock);\n        }\n        // Convert children before inserting the code block element\n        // to make sure that code block won't be splitted by any block.\n        conversionApi.convertChildren(viewCodeElement, codeBlock);\n        // Let's try to insert code block.\n        if (!conversionApi.safeInsert(codeBlock, data.modelCursor)) {\n            return;\n        }\n        consumable.consume(viewCodeElement, {\n            name: true\n        });\n        conversionApi.updateConversionResult(codeBlock, data);\n    };\n}\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * @returns {Function} Returns a conversion callback.\n * @internal\n */ function dataViewToModelTextNewlinesInsertion() {\n    return (evt, data, { consumable, writer })=>{\n        let position = data.modelCursor;\n        // When node is already converted then do nothing.\n        if (!consumable.test(data.viewItem)) {\n            return;\n        }\n        // When not inside `codeBlock` then do nothing.\n        if (!position.findAncestor('codeBlock')) {\n            return;\n        }\n        consumable.consume(data.viewItem);\n        const text = data.viewItem.data;\n        const textLines = text.split('\\n').map((data)=>writer.createText(data));\n        const lastLine = textLines[textLines.length - 1];\n        for (const node of textLines){\n            writer.insert(node, position);\n            position = position.getShiftedBy(node.offsetSize);\n            if (node !== lastLine) {\n                const softBreak = writer.createElement('softBreak');\n                writer.insert(softBreak, position);\n                position = writer.createPositionAfter(softBreak);\n            }\n        }\n        data.modelRange = writer.createRange(data.modelCursor, position);\n        data.modelCursor = position;\n    };\n}\n/**\n * A view-to-model converter that handles orphan text nodes (white spaces, new lines, etc.)\n * that surround `<code>` inside `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * // White spaces\n * <pre> <code>foo()</code> </pre>\n *\n * // White spaces\n * <pre>      <code>foo()</code>      </pre>\n *\n * // White spaces\n * <pre>\t\t\t<code>foo()</code>\t\t\t</pre>\n *\n * // New lines\n * <pre>\n * \t<code>foo()</code>\n * </pre>\n *\n * // Redundant text\n * <pre>ABC<code>foo()</code>DEF</pre>\n * ```\n *\n * Unified output for each case:\n *\n * ```html\n * <codeBlock language=\"plaintext\">foo()</codeBlock>\n * ```\n *\n * @returns Returns a conversion callback.\n * @internal\n */ function dataViewToModelOrphanNodeConsumer() {\n    return (evt, data, { consumable })=>{\n        const preElement = data.viewItem;\n        // Don't clean up nested pre elements. Their content should stay as it is, they are not upcasted\n        // to code blocks.\n        if (preElement.findAncestor('pre')) {\n            return;\n        }\n        const preChildren = Array.from(preElement.getChildren());\n        const childCodeElement = preChildren.find((node)=>node.is('element', 'code'));\n        // <code>-less <pre>. It will not upcast to code block in the model, skipping.\n        if (!childCodeElement) {\n            return;\n        }\n        for (const child of preChildren){\n            if (child === childCodeElement || !child.is('$text')) {\n                continue;\n            }\n            // Consuming the orphan to remove it from the input data.\n            // Second argument in `consumable.consume` is discarded for text nodes.\n            consumable.consume(child, {\n                name: true\n            });\n        }\n    };\n}\n\nconst DEFAULT_ELEMENT = 'paragraph';\n/**\n * The editing part of the code block feature.\n *\n * Introduces the `'codeBlock'` command and the `'codeBlock'` model element.\n */ class CodeBlockEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ShiftEnter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('codeBlock', {\n            languages: [\n                {\n                    language: 'plaintext',\n                    label: 'Plain text'\n                },\n                {\n                    language: 'c',\n                    label: 'C'\n                },\n                {\n                    language: 'cs',\n                    label: 'C#'\n                },\n                {\n                    language: 'cpp',\n                    label: 'C++'\n                },\n                {\n                    language: 'css',\n                    label: 'CSS'\n                },\n                {\n                    language: 'diff',\n                    label: 'Diff'\n                },\n                {\n                    language: 'go',\n                    label: 'Go'\n                },\n                {\n                    language: 'html',\n                    label: 'HTML'\n                },\n                {\n                    language: 'java',\n                    label: 'Java'\n                },\n                {\n                    language: 'javascript',\n                    label: 'JavaScript'\n                },\n                {\n                    language: 'php',\n                    label: 'PHP'\n                },\n                {\n                    language: 'python',\n                    label: 'Python'\n                },\n                {\n                    language: 'ruby',\n                    label: 'Ruby'\n                },\n                {\n                    language: 'typescript',\n                    label: 'TypeScript'\n                },\n                {\n                    language: 'xml',\n                    label: 'XML'\n                }\n            ],\n            // A single tab.\n            indentSequence: '\\t'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        // The main command.\n        editor.commands.add('codeBlock', new CodeBlockCommand(editor));\n        // Commands that change the indentation.\n        editor.commands.add('indentCodeBlock', new IndentCodeBlockCommand(editor));\n        editor.commands.add('outdentCodeBlock', new OutdentCodeBlockCommand(editor));\n        this.listenTo(view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentCodeBlock' : 'indentCodeBlock';\n            const command = editor.commands.get(commandName);\n            if (!command.isEnabled) {\n                return;\n            }\n            editor.execute(commandName);\n            data.stopPropagation();\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'pre'\n        });\n        schema.register('codeBlock', {\n            allowWhere: '$block',\n            allowChildren: '$text',\n            // Disallow `$inlineObject` and its derivatives like `inlineWidget` inside `codeBlock` to ensure that only text,\n            // not other inline elements like inline images, are allowed. This maintains the semantic integrity of code blocks.\n            disallowChildren: '$inlineObject',\n            allowAttributes: [\n                'language'\n            ],\n            allowAttributesOf: '$listItem',\n            isBlock: true\n        });\n        // Disallow formatting attributes on `codeBlock` children.\n        schema.addAttributeCheck((context, attributeName)=>{\n            const parent = context.getItem(context.length - 2);\n            const isFormatting = schema.getAttributeProperties(attributeName).isFormatting;\n            if (isFormatting && parent && parent.name == 'codeBlock') {\n                return false;\n            }\n        });\n        // Conversion.\n        editor.editing.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs, true));\n        editor.data.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs));\n        editor.data.downcastDispatcher.on('insert:softBreak', modelToDataViewSoftBreakInsertion(model), {\n            priority: 'high'\n        });\n        editor.data.upcastDispatcher.on('element:code', dataViewToModelCodeBlockInsertion(view, normalizedLanguagesDefs));\n        editor.data.upcastDispatcher.on('text', dataViewToModelTextNewlinesInsertion());\n        editor.data.upcastDispatcher.on('element:pre', dataViewToModelOrphanNodeConsumer(), {\n            priority: 'high'\n        });\n        // Intercept the clipboard input (paste) when the selection is anchored in the code block and force the clipboard\n        // data to be pasted as a single plain text. Otherwise, the code lines will split the code block and\n        // \"spill out\" as separate paragraphs.\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data)=>{\n            let insertionRange = model.createRange(model.document.selection.anchor);\n            // Use target ranges in case this is a drop.\n            if (data.targetRanges) {\n                insertionRange = editor.editing.mapper.toModelRange(data.targetRanges[0]);\n            }\n            if (!insertionRange.start.parent.is('element', 'codeBlock')) {\n                return;\n            }\n            const text = data.dataTransfer.getData('text/plain');\n            const writer = new ViewUpcastWriter(editor.editing.view.document);\n            // Pass the view fragment to the default clipboardInput handler.\n            data.content = rawSnippetTextToViewDocumentFragment(writer, text);\n        });\n        if (editor.plugins.has('ClipboardPipeline')) {\n            // Elements may have a plain textual representation (hence be present in the 'text/plain' data transfer),\n            // but not be allowed in the code block.\n            // Filter them out before inserting the content to the model.\n            editor.plugins.get(ClipboardPipeline).on('contentInsertion', (evt, data)=>{\n                const model = editor.model;\n                const selection = model.document.selection;\n                if (!selection.anchor.parent.is('element', 'codeBlock')) {\n                    return;\n                }\n                model.change((writer)=>{\n                    const contentRange = writer.createRangeIn(data.content);\n                    for (const item of [\n                        ...contentRange.getItems()\n                    ]){\n                        // Remove all nodes disallowed in the code block.\n                        if (item.is('node') && !schema.checkChild(selection.anchor, item)) {\n                            writer.remove(item);\n                        }\n                    }\n                });\n            });\n        }\n        // Make sure multi–line selection is always wrapped in a code block when `getSelectedContent()`\n        // is used (e.g. clipboard copy). Otherwise, only the raw text will be copied to the clipboard and,\n        // upon next paste, this bare text will not be inserted as a code block, which is not the best UX.\n        // Similarly, when the selection in a single line, the selected content should be an inline code\n        // so it can be pasted later on and retain it's preformatted nature.\n        this.listenTo(model, 'getSelectedContent', (evt, [selection])=>{\n            const anchor = selection.anchor;\n            if (selection.isCollapsed || !anchor.parent.is('element', 'codeBlock') || !anchor.hasSameParentAs(selection.focus)) {\n                return;\n            }\n            model.change((writer)=>{\n                const docFragment = evt.return;\n                // fo[o<softBreak></softBreak>b]ar  ->   <codeBlock language=\"...\">[o<softBreak></softBreak>b]<codeBlock>\n                if (anchor.parent.is('element') && (docFragment.childCount > 1 || selection.containsEntireContent(anchor.parent))) {\n                    const codeBlock = writer.createElement('codeBlock', anchor.parent.getAttributes());\n                    writer.append(docFragment, codeBlock);\n                    const newDocumentFragment = writer.createDocumentFragment();\n                    writer.append(codeBlock, newDocumentFragment);\n                    evt.return = newDocumentFragment;\n                    return;\n                }\n                // \"f[oo]\"                          ->   <$text code=\"true\">oo</text>\n                const textNode = docFragment.getChild(0);\n                if (schema.checkAttribute(textNode, 'code')) {\n                    writer.setAttribute('code', true, textNode);\n                }\n            });\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const commands = editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            // Priority is highest due to integration with `IndentList` command of `List` plugin.\n            // If selection is in a code block we give priority to it. This way list item cannot be indented\n            // but if we would give priority to indenting list item then user would have to indent list item\n            // as much as possible and only then he could indent code block.\n            indent.registerChildCommand(commands.get('indentCodeBlock'), {\n                priority: 'highest'\n            });\n        }\n        if (outdent) {\n            outdent.registerChildCommand(commands.get('outdentCodeBlock'));\n        }\n        // Customize the response to the <kbd>Enter</kbd> and <kbd>Shift</kbd>+<kbd>Enter</kbd>\n        // key press when the selection is in the code block. Upon enter key press we can either\n        // leave the block if it's \"two or three enters\" in a row or create a new code block line, preserving\n        // previous line's indentation.\n        this.listenTo(editor.editing.view.document, 'enter', (evt, data)=>{\n            const positionParent = editor.model.document.selection.getLastPosition().parent;\n            if (!positionParent.is('element', 'codeBlock')) {\n                return;\n            }\n            if (!leaveBlockStartOnEnter(editor, data.isSoft) && !leaveBlockEndOnEnter(editor, data.isSoft)) {\n                breakLineOnEnter(editor);\n            }\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'pre'\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Observe when user enters or leaves code block and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified code block.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        const languageDefs = getNormalizedAndLocalizedLanguageDefinitions(this.editor);\n        let lastFocusedCodeBlock = null;\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            if (!ui || lastFocusedCodeBlock === focusParent || !focusParent.is('element')) {\n                return;\n            }\n            if (lastFocusedCodeBlock && lastFocusedCodeBlock.is('element', 'codeBlock')) {\n                ui.ariaLiveAnnouncer.announce(getCodeBlockAriaAnnouncement(t, languageDefs, lastFocusedCodeBlock, 'leave'));\n            }\n            if (focusParent.is('element', 'codeBlock')) {\n                ui.ariaLiveAnnouncer.announce(getCodeBlockAriaAnnouncement(t, languageDefs, focusParent, 'enter'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Normally, when the Enter (or Shift+Enter) key is pressed, a soft line break is to be added to the\n * code block. Let's try to follow the indentation of the previous line when possible, for instance:\n *\n * ```html\n * // Before pressing enter (or shift enter)\n * <codeBlock>\n * \"    foo()\"[]                   // Indent of 4 spaces.\n * </codeBlock>\n *\n * // After pressing:\n * <codeBlock>\n * \"    foo()\"                 // Indent of 4 spaces.\n * <softBreak></softBreak>     // A new soft break created by pressing enter.\n * \"    \"[]                    // Retain the indent of 4 spaces.\n * </codeBlock>\n * ```\n */ function breakLineOnEnter(editor) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    // Use last position as other mechanisms (e.g. condition deciding whether this function should be called) also check that.\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    let leadingWhiteSpaces;\n    const node = getTextNodeAtLineStart(lastSelectionPosition, model);\n    // Figure out the indentation (white space chars) at the beginning of the line.\n    if (node && node.is('$text')) {\n        leadingWhiteSpaces = getLeadingWhiteSpaces(node);\n    }\n    // Keeping everything in a change block for a single undo step.\n    editor.model.change((writer)=>{\n        editor.execute('shiftEnter');\n        // If the line before being broken in two had some indentation, let's retain it\n        // in the new line.\n        if (leadingWhiteSpaces) {\n            writer.insertText(leadingWhiteSpaces, modelDoc.selection.anchor);\n        }\n    });\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the beginning\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>[]<softBreak></softBreak>foo</codeBlock>\n *\n * // After pressing:\n * <paragraph>[]</paragraph><codeBlock>foo</codeBlock>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */ function leaveBlockStartOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeAfter = lastSelectionPosition.nodeAfter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtStart) {\n        return false;\n    }\n    if (!isSoftBreakNode(nodeAfter)) {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change((writer)=>{\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        // The cloned block exists now before the original code block.\n        const newBlock = modelDoc.selection.anchor.parent.previousSibling;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        writer.setSelection(newBlock, 'in');\n        editor.model.schema.removeDisallowedAttributes([\n            newBlock\n        ], writer);\n        // Remove the <softBreak> that originally followed the selection position.\n        writer.remove(nodeAfter);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the end\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>foo[]</codeBlock>\n *\n * // After first press:\n * <codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n *\n * // After second press:\n * <codeBlock>foo</codeBlock><paragraph>[]</paragraph>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */ function leaveBlockEndOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeBefore = lastSelectionPosition.nodeBefore;\n    let emptyLineRangeToRemoveOnEnter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtEnd || !nodeBefore || !nodeBefore.previousSibling) {\n        return false;\n    }\n    // When the position is directly preceded by two soft breaks\n    //\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>[]</codeBlock>\n    //\n    // it creates the following range that will be cleaned up before leaving:\n    //\n    //\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>]</codeBlock>\n    //\n    if (isSoftBreakNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling), model.createPositionAfter(nodeBefore));\n    } else if (isEmptyishTextNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling) && isSoftBreakNode(nodeBefore.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    } else if (isEmptyishTextNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling) && isEmptyishTextNode(nodeBefore.previousSibling.previousSibling) && nodeBefore.previousSibling.previousSibling && isSoftBreakNode(nodeBefore.previousSibling.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    } else {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change((writer)=>{\n        // Remove the last <softBreak>s and all white space characters that followed them.\n        writer.remove(emptyLineRangeToRemoveOnEnter);\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        const newBlock = modelDoc.selection.anchor.parent;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        editor.model.schema.removeDisallowedAttributes([\n            newBlock\n        ], writer);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\nfunction isEmptyishTextNode(node) {\n    return node && node.is('$text') && !node.data.match(/\\S/);\n}\nfunction isSoftBreakNode(node) {\n    return node && node.is('element', 'softBreak');\n}\n\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n */ class CodeBlockUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const itemDefinitions = this._getLanguageListItemDefinitions(normalizedLanguageDefs);\n        const command = editor.commands.get('codeBlock');\n        componentFactory.add('codeBlock', (locale)=>{\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            const accessibleLabel = t('Insert code block');\n            splitButtonView.set({\n                label: accessibleLabel,\n                tooltip: true,\n                icon: IconCodeBlock,\n                isToggleable: true\n            });\n            splitButtonView.bind('isOn').to(command, 'value', (value)=>!!value);\n            splitButtonView.on('execute', ()=>{\n                editor.execute('codeBlock', {\n                    usePreviousLanguageChoice: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.on('execute', (evt)=>{\n                editor.execute('codeBlock', {\n                    language: evt.source._codeBlockLanguage,\n                    forceValue: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.class = 'ck-code-block-dropdown';\n            dropdownView.bind('isEnabled').to(command);\n            addListToDropdown(dropdownView, itemDefinitions, {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            return dropdownView;\n        });\n        componentFactory.add('menuBar:codeBlock', (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                role: 'menuitem',\n                label: t('Code block'),\n                icon: IconCodeBlock\n            });\n            menuView.bind('isEnabled').to(command);\n            const listView = new MenuBarMenuListView(locale);\n            listView.set({\n                ariaLabel: t('Insert code block')\n            });\n            for (const definition of itemDefinitions){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.bind(...Object.keys(definition.model)).to(definition.model);\n                buttonView.set({\n                    isToggleable: true,\n                    role: 'menuitemcheckbox'\n                });\n                buttonView.delegate('execute').to(menuView);\n                buttonView.on('execute', ()=>{\n                    editor.execute('codeBlock', {\n                        language: definition.model._codeBlockLanguage,\n                        forceValue: command.value == definition.model._codeBlockLanguage ? false : true\n                    });\n                    editor.editing.view.focus();\n                });\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n    /**\n\t * A helper returning a collection of the `codeBlock` dropdown items representing languages\n\t * available for the user to choose from.\n\t */ _getLanguageListItemDefinitions(normalizedLanguageDefs) {\n        const editor = this.editor;\n        const command = editor.commands.get('codeBlock');\n        const itemDefinitions = new Collection();\n        for (const languageDef of normalizedLanguageDefs){\n            const definition = {\n                type: 'button',\n                model: new UIModel({\n                    _codeBlockLanguage: languageDef.language,\n                    label: languageDef.label,\n                    role: 'menuitemradio',\n                    withText: true\n                })\n            };\n            definition.model.bind('isOn').to(command, 'value', (value)=>{\n                return value === definition.model._codeBlockLanguage;\n            });\n            itemDefinitions.add(definition);\n        }\n        return itemDefinitions;\n    }\n}\n\n/**\n * The code block plugin.\n *\n * For more information about this feature check the {@glink api/code-block package page} and the\n * {@glink features/code-blocks code block} feature guide.\n *\n * This is a \"glue\" plugin that loads the {@link module:code-block/codeblockediting~CodeBlockEditing code block editing feature}\n * and the {@link module:code-block/codeblockui~CodeBlockUI code block UI feature}.\n */ class CodeBlock extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CodeBlockEditing,\n            CodeBlockUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlock';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { CodeBlock, CodeBlockCommand, CodeBlockEditing, CodeBlockUI, IndentCodeBlockCommand, OutdentCodeBlockCommand, canBeCodeBlock as _canBeCodeBlock, dataViewToModelCodeBlockInsertion as _dataViewToModelCodeBlockInsertion, dataViewToModelOrphanNodeConsumer as _dataViewToModelCodeBlockOrphanNodeConsumer, dataViewToModelTextNewlinesInsertion as _dataViewToModelCodeBlockTextNewlinesInsertion, getCodeBlockAriaAnnouncement as _getCodeBlockAriaAnnouncement, getIndentOutdentPositions as _getCodeBlockIndentOutdentPositions, getLeadingWhiteSpaces as _getCodeBlockLeadingWhiteSpaces, getPropertyAssociation as _getCodeBlockPropertyAssociation, getTextNodeAtLineStart as _getCodeBlockTextNodeAtLineStart, getNormalizedAndLocalizedLanguageDefinitions as _getNormalizedAndLocalizedCodeBlockLanguageDefinitions, isModelSelectionInCodeBlock as _isModelSelectionInCodeBlock, modelToDataViewSoftBreakInsertion as _modelToDataViewCodeBlockSoftBreakInsertion, modelToViewCodeBlockInsertion as _modelToViewCodeBlockInsertion, rawSnippetTextToViewDocumentFragment as _rawCodeBlockSnippetTextToViewDocumentFragment };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/utils\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { CodeBlockLanguageDefinition } from './codeblockconfig.js';\nimport type {\n\tModelDocumentSelection,\n\tModelElement,\n\tModel,\n\tModelPosition,\n\tModelSchema,\n\tModelText,\n\tViewUpcastWriter,\n\tViewDocumentFragment,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { first, type LocaleTranslate } from 'ckeditor5/src/utils.js';\n\n/**\n * Returns code block languages as defined in `config.codeBlock.languages` but processed:\n *\n * * To consider the editor localization, i.e. to display {@link module:code-block/codeblockconfig~CodeBlockLanguageDefinition}\n * in the correct language. There is no way to use {@link module:utils/locale~Locale#t} when the user\n * configuration is defined because the editor does not exist yet.\n * * To make sure each definition has a CSS class associated with it even if not specified\n * in the original configuration.\n *\n * @internal\n */\nexport function getNormalizedAndLocalizedLanguageDefinitions( editor: Editor ): Array<CodeBlockLanguageDefinition> {\n\tconst t = editor.t;\n\tconst languageDefs = editor.config.get( 'codeBlock.languages' ) as Array<CodeBlockLanguageDefinition>;\n\n\tfor ( const def of languageDefs ) {\n\t\tif ( def.label === 'Plain text' ) {\n\t\t\tdef.label = t( 'Plain text' );\n\t\t}\n\n\t\tif ( def.class === undefined ) {\n\t\t\tdef.class = `language-${ def.language }`;\n\t\t}\n\t}\n\n\treturn languageDefs;\n}\n\n/**\n * Returns an object associating certain language definition properties with others. For instance:\n *\n * For:\n *\n * ```ts\n * const definitions = {\n * \t{ language: 'php', class: 'language-php', label: 'PHP' },\n * \t{ language: 'javascript', class: 'js', label: 'JavaScript' },\n * };\n *\n * getPropertyAssociation( definitions, 'class', 'language' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'language-php': 'php',\n * \t'js': 'javascript'\n * }\n * ```\n *\n * and\n *\n * ```ts\n * getPropertyAssociation( definitions, 'language', 'label' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'php': 'PHP',\n * \t'javascript': 'JavaScript'\n * }\n * ```\n *\n * @internal\n */\nexport function getPropertyAssociation(\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>,\n\tkey: keyof CodeBlockLanguageDefinition,\n\tvalue: keyof CodeBlockLanguageDefinition\n): Record<string, string> {\n\tconst association: Record<string, string> = {};\n\n\tfor ( const def of languageDefs ) {\n\t\tif ( key === 'class' ) {\n\t\t\t// Only the first class is considered.\n\t\t\tconst newKey = ( def[ key ]! ).split( ' ' ).shift()!;\n\n\t\t\tassociation[ newKey ] = def[ value ]!;\n\t\t} else {\n\t\t\tassociation[ def[ key ]! ] = def[ value ]!;\n\t\t}\n\t}\n\n\treturn association;\n}\n\n/**\n * For a given model text node, it returns white spaces that precede other characters in that node.\n * This corresponds to the indentation part of the code block line.\n *\n * @internal\n */\nexport function getLeadingWhiteSpaces( textNode: ModelText ): string {\n\treturn textNode.data.match( /^(\\s*)/ )![ 0 ];\n}\n\n/**\n * For plain text containing the code (a snippet), it returns a document fragment containing\n * view text nodes separated by `<br>` elements (in place of new line characters \"\\n\"), for instance:\n *\n * Input:\n *\n * ```ts\n * \"foo()\\n\n * bar()\"\n * ```\n *\n * Output:\n *\n * ```html\n * <DocumentFragment>\n * \t\"foo()\"\n * \t<br/>\n * \t\"bar()\"\n * </DocumentFragment>\n * ```\n *\n * @param text The raw code text to be converted.\n * @internal\n */\nexport function rawSnippetTextToViewDocumentFragment( writer: ViewUpcastWriter, text: string ): ViewDocumentFragment {\n\tconst fragment = writer.createDocumentFragment();\n\tconst textLines = text.split( '\\n' );\n\n\tconst items = textLines.reduce( ( nodes: Array<string | ViewElement>, line, lineIndex ) => {\n\t\tnodes.push( line );\n\n\t\tif ( lineIndex < textLines.length - 1 ) {\n\t\t\tnodes.push( writer.createElement( 'br' ) );\n\t\t}\n\n\t\treturn nodes;\n\t}, [] );\n\n\twriter.appendChild( items, fragment );\n\n\treturn fragment;\n}\n\n/**\n * Returns an array of all model positions within the selection that represent code block lines.\n *\n * If the selection is collapsed, it returns the exact selection anchor position:\n *\n * ```html\n * <codeBlock>[]foo</codeBlock>        ->     <codeBlock>^foo</codeBlock>\n * <codeBlock>foo[]bar</codeBlock>     ->     <codeBlock>foo^bar</codeBlock>\n * ```\n *\n * Otherwise, it returns positions **before** each text node belonging to all code blocks contained by the selection:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n *     <softBreak></softBreak>         ->        <softBreak></softBreak>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * It also works across other non–code blocks:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n * </codeBlock>                               </codeBlock>\n * <paragraph>text</paragraph>         ->     <paragraph>text</paragraph>\n * <codeBlock>                                <codeBlock>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * **Note:** The positions are in reverse order so they do not get outdated when iterating over them and\n * the writer inserts or removes elements at the same time.\n *\n * **Note:** The position is located after the leading white spaces in the text node.\n *\n * @internal\n */\nexport function getIndentOutdentPositions( model: Model ): Array<ModelPosition> {\n\tconst selection = model.document.selection;\n\tconst positions: Array<ModelPosition> = [];\n\n\t// When the selection is collapsed, there's only one position we can indent or outdent.\n\tif ( selection.isCollapsed ) {\n\t\treturn [ selection.anchor! ];\n\t}\n\n\t// When the selection is NOT collapsed, collect all positions starting before text nodes\n\t// (code lines) in any <codeBlock> within the selection.\n\n\t// Walk backward so positions we are about to collect here do not get outdated when\n\t// inserting or deleting using the writer.\n\n\tconst walker = selection.getFirstRange()!.getWalker( {\n\t\tignoreElementEnd: true,\n\t\tdirection: 'backward'\n\t} );\n\n\tfor ( const { item } of walker ) {\n\t\tlet node = item.is( '$textProxy' ) ? item.textNode : item;\n\t\tconst parent = node.parent;\n\n\t\tif ( !parent!.is( 'element', 'codeBlock' ) || node.is( 'element', 'softBreak' ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// For each item in code block, move backwards until the beginning of the line it is in is found.\n\t\twhile ( node.previousSibling && !node.previousSibling.is( 'element', 'softBreak' ) ) {\n\t\t\tnode = node.previousSibling;\n\t\t}\n\n\t\t// Take the leading white spaces into account (only for text nodes).\n\t\tconst startOffset = !node.is( '$text' ) ? node.startOffset! : node.startOffset! + getLeadingWhiteSpaces( node ).length;\n\t\tconst position = model.createPositionAt( parent, startOffset );\n\n\t\t// Do not add the same position twice. Unfortunately using set doesn't deduplicate positions because\n\t\t// they are different objects.\n\t\tif ( positions.every( pos => !pos.isEqual( position ) ) ) {\n\t\t\tpositions.push( position );\n\t\t}\n\t}\n\n\treturn positions;\n}\n\n/**\n * Checks if any of the blocks within the model selection is a code block.\n *\n * @internal\n */\nexport function isModelSelectionInCodeBlock( selection: ModelDocumentSelection ): boolean {\n\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\treturn !!firstBlock && firstBlock.is( 'element', 'codeBlock' );\n}\n\n/**\n * Checks if an {@link module:engine/model/element~ModelElement Element} can become a code block.\n *\n * @param schema Model's schema.\n * @param element The element to be checked.\n * @returns Check result.\n * @internal\n */\nexport function canBeCodeBlock( schema: ModelSchema, element: ModelElement ): boolean {\n\tif ( element.is( 'rootElement' ) || schema.isLimit( element ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( element.parent as ModelElement, 'codeBlock' );\n}\n\n/**\n * Get the translated message read by the screen reader when you enter or exit an element with your cursor.\n *\n * @internal\n */\nexport function getCodeBlockAriaAnnouncement(\n\tt: LocaleTranslate,\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>,\n\telement: ModelElement,\n\tdirection: 'enter' | 'leave'\n): string {\n\tconst languagesToLabels = getPropertyAssociation( languageDefs, 'language', 'label' );\n\tconst codeBlockLanguage = element.getAttribute( 'language' ) as string;\n\n\tif ( codeBlockLanguage in languagesToLabels ) {\n\t\tconst language = languagesToLabels[ codeBlockLanguage ];\n\n\t\tif ( direction === 'enter' ) {\n\t\t\treturn t( 'Entering %0 code snippet', language );\n\t\t}\n\n\t\treturn t( 'Leaving %0 code snippet', language );\n\t}\n\n\tif ( direction === 'enter' ) {\n\t\treturn t( 'Entering code snippet' );\n\t}\n\n\treturn t( 'Leaving code snippet' );\n}\n\n/**\n * For given position, finds the closest position that is at the beginning of a line of code and returns a text node that is at the\n * beginning of the line (or `null` if there's no text node at the beginning of a given line).\n *\n * Line beings at the start of a code block element and after each `softBreak` element.\n *\n * Note: even though code block doesn't allow inline elements other than `<softBreak>` by default, some features may overwrite this rule,\n * so such inline elements are taken into account.\n *\n * Some examples of expected results:\n *\n * ```\n * <codeBlock>^</codeBlock>                                ->   null\n * <codeBlock>^foobar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foobar^</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^bar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^<softBreak />bar</codeBlock>             ->   <codeBlock>[foo]<softBreak />bar</codeBlock>\n * <codeBlock>foo<softBreak />bar^</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />b^ar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />^bar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>^<element /></codeBlock>                     ->   null\n * <codeBlock><element />^</codeBlock>                     ->   null\n * <codeBlock>foo^<element /></codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />^</codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />bar^</codeBlock>               ->   <codeBlock>[foo]<element />bar</codeBlock>\n * <codeBlock><element />bar^</codeBlock>                  ->   null\n * <codeBlock>foo<softBreak />^<softBreak /></codeBlock>   ->   null\n * <codeBlock>foo<softBreak />^<element /></codeBlock>     ->   null\n * <codeBlock>foo<softBreak /><element />^</codeBlock>     ->   null\n * <codeBlock>foo<softBreak />bar<element />^</codeBlock>  ->   <codeBlock>foo<softBreak />[bar]<element /></codeBlock>\n * <codeBlock>foo<softBreak /><element />ba^r</codeBlock>  ->   null\n * ```\n *\n * @internal\n */\nexport function getTextNodeAtLineStart( position: ModelPosition, model: Model ): ModelText | null {\n\t// First, move position before a text node, if it is inside a text node.\n\tif ( position.textNode ) {\n\t\tposition = model.createPositionBefore( position.textNode );\n\t}\n\n\t// Then, jump-back the position until it is before a `softBreak` or at the beginning of the `codeBlock`.\n\twhile ( position.nodeBefore && !position.nodeBefore.is( 'element', 'softBreak' ) ) {\n\t\tposition = model.createPositionBefore( position.nodeBefore );\n\t}\n\n\t// Now, the position is at the beginning of a line.\n\t// Return a text node after the position, if there is one.\n\tconst nodeAtStart = position.nodeAfter;\n\n\treturn nodeAtStart && nodeAtStart.is( '$text' ) ? nodeAtStart : null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/codeblockcommand\n */\n\nimport type { ModelElement, ModelWriter } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\nimport { getNormalizedAndLocalizedLanguageDefinitions, canBeCodeBlock } from './utils.js';\n\n/**\n * The code block command plugin.\n */\nexport class CodeBlockCommand extends Command {\n\t/**\n\t * Contains the last used language.\n\t */\n\tprivate _lastLanguage: string | null;\n\n\t/**\n\t * Contains language if any is selected, false otherwise.\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: string | false;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._lastLanguage = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n\t * the selection will be removed. If it is off, all selected blocks will be flattened and\n\t * wrapped by a code block.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.language The code block language.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a code block,\n\t * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n\t * @param options.usePreviousLanguageChoice If set on `true` and the `options.language` is not specified, the command\n\t * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n\t */\n\tpublic override execute( options: {\n\t\tlanguage?: string;\n\t\tforceValue?: boolean;\n\t\tusePreviousLanguageChoice?: boolean;\n\t} = {} ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\t\tconst firstLanguageInConfig = normalizedLanguagesDefs[ 0 ];\n\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\t\tconst value = options.forceValue == undefined ? !this.value : options.forceValue;\n\t\tconst language = getLanguage( options, this._lastLanguage, firstLanguageInConfig.language );\n\n\t\tmodel.change( writer => {\n\t\t\tif ( value ) {\n\t\t\t\tthis._applyCodeBlock( writer, blocks, language );\n\t\t\t} else {\n\t\t\t\tthis._removeCodeBlock( writer, blocks );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue(): string | false {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\t\tconst isCodeBlock = !!firstBlock?.is( 'element', 'codeBlock' );\n\n\t\treturn isCodeBlock ? firstBlock.getAttribute( 'language' ) as string : false;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn canBeCodeBlock( schema, firstBlock );\n\t}\n\n\tprivate _applyCodeBlock( writer: ModelWriter, blocks: Array<ModelElement>, language: string ): void {\n\t\tthis._lastLanguage = language;\n\n\t\tconst schema = this.editor.model.schema;\n\t\tconst allowedBlocks = blocks.filter( block => canBeCodeBlock( schema, block ) );\n\n\t\tfor ( const block of allowedBlocks ) {\n\t\t\twriter.rename( block, 'codeBlock' );\n\t\t\twriter.setAttribute( 'language', language, block );\n\t\t\tschema.removeDisallowedAttributes( [ block ], writer );\n\n\t\t\t// Remove children of the  `codeBlock` element that are not allowed. See #9567.\n\t\t\tArray.from( block.getChildren() )\n\t\t\t\t.filter( child => !schema.checkChild( block, child ) )\n\t\t\t\t.forEach( child => writer.remove( child ) );\n\t\t}\n\n\t\tallowedBlocks.reverse().forEach( ( currentBlock, i ) => {\n\t\t\tconst nextBlock = allowedBlocks[ i + 1 ];\n\n\t\t\tif ( currentBlock.previousSibling === nextBlock ) {\n\t\t\t\twriter.appendElement( 'softBreak', nextBlock );\n\t\t\t\twriter.merge( writer.createPositionBefore( currentBlock ) );\n\t\t\t}\n\t\t} );\n\t}\n\n\tprivate _removeCodeBlock( writer: ModelWriter, blocks: Array<ModelElement> ): void {\n\t\tconst codeBlocks = blocks.filter( block => block.is( 'element', 'codeBlock' ) );\n\n\t\tfor ( const block of codeBlocks ) {\n\t\t\tconst range = writer.createRangeOn( block );\n\n\t\t\tfor ( const item of Array.from( range.getItems() ).reverse() ) {\n\t\t\t\tif ( item.is( 'element', 'softBreak' ) && item.parent!.is( 'element', 'codeBlock' ) ) {\n\t\t\t\t\tconst { position } = writer.split( writer.createPositionBefore( item ) );\n\t\t\t\t\tconst elementAfter = position.nodeAfter as ModelElement;\n\n\t\t\t\t\twriter.rename( elementAfter, 'paragraph' );\n\t\t\t\t\twriter.removeAttribute( 'language', elementAfter );\n\t\t\t\t\twriter.remove( item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.rename( block, 'paragraph' );\n\t\t\twriter.removeAttribute( 'language', block );\n\t\t}\n\t}\n}\n\n/**\n * Picks the language for the new code block. If any language is passed as an option,\n * it will be returned. Else, if option usePreviousLanguageChoice is true and some\n * code block was already created (lastLanguage is not null) then previously used\n * language will be returned. If not, it will return default language.\n */\nfunction getLanguage(\n\toptions: { usePreviousLanguageChoice?: boolean; language?: string },\n\tlastLanguage: string | null,\n\tdefaultLanguage: string\n): string {\n\tif ( options.language ) {\n\t\treturn options.language;\n\t}\n\n\tif ( options.usePreviousLanguageChoice && lastLanguage ) {\n\t\treturn lastLanguage;\n\t}\n\n\treturn defaultLanguage;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/indentcodeblockcommand\n */\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetIndentOutdentPositions,\n\tisModelSelectionInCodeBlock\n} from './utils.js';\n\n/**\n * The code block indentation increase command plugin.\n */\nexport class IndentCodeBlockCommand extends Command {\n\t/**\n\t * A sequence of characters added to the line when the command is executed.\n\t */\n\tprivate _indentSequence: string;\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._indentSequence = editor.config.get( 'codeBlock.indentSequence' )!;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be increased.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.change( writer => {\n\t\t\tconst positions = getIndentOutdentPositions( model );\n\n\t\t\t// Indent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n\t\t\t//\n\t\t\t//\t\t<codeBlock>^foo</codeBlock>        ->       <codeBlock>    foo</codeBlock>\n\t\t\t//\n\t\t\t//\t\t<codeBlock>foo^bar</codeBlock>     ->       <codeBlock>foo    bar</codeBlock>\n\t\t\t//\n\t\t\t// Also, when there is more than one position:\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t^foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t^bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\t//\t\t->\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t    foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t    bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\tfor ( const position of positions ) {\n\t\t\t\tconst indentSequenceTextElement = writer.createText( this._indentSequence );\n\n\t\t\t\t// Previously insertion was done by writer.insertText(). It was changed to insertContent() to enable\n\t\t\t\t// integration of code block with track changes. It's the easiest way of integration because insertContent()\n\t\t\t\t// is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n\t\t\t\t// some additional work will be required in track changes integration of code block.\n\t\t\t\tmodel.insertContent( indentSequenceTextElement, position );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tif ( !this._indentSequence ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Indent (forward) command is always enabled when there's any code block in the selection\n\t\t// because you can always indent code lines.\n\t\treturn isModelSelectionInCodeBlock( this.editor.model.document.selection );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/outdentcodeblockcommand\n */\n\nimport type { Model, ModelPosition, ModelRange } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetLeadingWhiteSpaces,\n\tgetIndentOutdentPositions,\n\tisModelSelectionInCodeBlock,\n\tgetTextNodeAtLineStart\n} from './utils.js';\n\n/**\n * The code block indentation decrease command plugin.\n */\nexport class OutdentCodeBlockCommand extends Command {\n\t/**\n\t * A sequence of characters removed from the line when the command is executed.\n\t */\n\tprivate readonly _indentSequence: string;\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._indentSequence = editor.config.get( 'codeBlock.indentSequence' )!;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be decreased.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.change( () => {\n\t\t\tconst positions = getIndentOutdentPositions( model );\n\n\t\t\t// Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n\t\t\t//\n\t\t\t//\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n\t\t\t//\n\t\t\t//\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n\t\t\t//\n\t\t\t// Also, when there is more than one position:\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\t    ^foobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\t    ^bazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\t//\n\t\t\t//\t\t->\n\t\t\t//\n\t\t\t//\t\t<codeBlock>\n\t\t\t//\t\t\tfoobar\n\t\t\t//\t\t\t<softBreak></softBreak>\n\t\t\t//\t\t\tbazqux\n\t\t\t//\t\t</codeBlock>\n\t\t\tfor ( const position of positions ) {\n\t\t\t\tconst range = getLastOutdentableSequenceRange( model, position, this._indentSequence );\n\n\t\t\t\tif ( range ) {\n\t\t\t\t\t// Previously deletion was done by writer.remove(). It was changed to deleteContent() to enable\n\t\t\t\t\t// integration of code block with track changes. It's the easiest way of integration because deleteContent()\n\t\t\t\t\t// is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n\t\t\t\t\t// some additional work will be required in track changes integration of code block.\n\t\t\t\t\tmodel.deleteContent( model.createSelection( range ) );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tif ( !this._indentSequence ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\n\t\tif ( !isModelSelectionInCodeBlock( model.document.selection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Outdent command can execute only when there is an indent character sequence\n\t\t// in some of the lines.\n\t\treturn getIndentOutdentPositions( model ).some( position => {\n\t\t\treturn getLastOutdentableSequenceRange( model, position, this._indentSequence );\n\t\t} );\n\t}\n}\n\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~ModelPosition>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~ModelRange>|null}\nfunction getLastOutdentableSequenceRange( model: Model, position: ModelPosition, sequence: string ): ModelRange | null {\n\t// Positions start before each text node (code line). Get the node corresponding to the position.\n\tconst nodeAtPosition = getTextNodeAtLineStart( position, model );\n\n\tif ( !nodeAtPosition ) {\n\t\treturn null;\n\t}\n\n\tconst leadingWhiteSpaces = getLeadingWhiteSpaces( nodeAtPosition );\n\tconst lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf( sequence );\n\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n\t//\n\tif ( lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length ) {\n\t\treturn null;\n\t}\n\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n\t//\n\tif ( lastIndexOfSequence === -1 ) {\n\t\treturn null;\n\t}\n\n\tconst { parent, startOffset } = nodeAtPosition;\n\n\t// Create a range that contains the **last** indent sequence among the leading whitespaces\n\t// of the line.\n\t//\n\t// For instance, assuming the indent sequence is 4x space (\"    \"):\n\t//\n\t//\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n\t//\n\treturn model.createRange(\n\t\tmodel.createPositionAt( parent!, startOffset! + lastIndexOfSequence ),\n\t\tmodel.createPositionAt( parent!, startOffset! + lastIndexOfSequence + sequence.length )\n\t);\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/converters\n */\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\nimport type { DowncastInsertEvent, ModelElement, Model, UpcastElementEvent, UpcastTextEvent, EditingView } from 'ckeditor5/src/engine.js';\nimport type { CodeBlockLanguageDefinition } from './codeblockconfig.js';\nimport { getPropertyAssociation } from './utils.js';\n\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output (editing):\n *\n * ```html\n * <pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n * ```\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @param useLabels When `true`, the `<pre>` element will get a `data-language` attribute with a\n * human–readable label of the language. Used only in the editing.\n * @returns Returns a conversion callback.\n * @internal\n */\nexport function modelToViewCodeBlockInsertion(\n\tmodel: Model,\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>,\n\tuseLabels: boolean = false\n): GetCallback<DowncastInsertEvent> {\n\t// Language CSS classes:\n\t//\n\t//\t\t{\n\t//\t\t\tphp: 'language-php',\n\t//\t\t\tpython: 'language-python',\n\t//\t\t\tjavascript: 'js',\n\t//\t\t\t...\n\t//\t\t}\n\tconst languagesToClasses = getPropertyAssociation( languageDefs, 'language', 'class' );\n\n\t// Language labels:\n\t//\n\t//\t\t{\n\t//\t\t\tphp: 'PHP',\n\t//\t\t\tpython: 'Python',\n\t//\t\t\tjavascript: 'JavaScript',\n\t//\t\t\t...\n\t//\t\t}\n\tconst languagesToLabels = getPropertyAssociation( languageDefs, 'language', 'label' );\n\n\treturn ( evt, data, conversionApi ): void => {\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tif ( !consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeBlockLanguage = data.item.getAttribute( 'language' ) as string;\n\t\tconst targetViewPosition = mapper.toViewPosition( model.createPositionBefore( data.item ) );\n\t\tconst preAttributes: Record<string, string> = {};\n\n\t\t// Attributes added only in the editing view.\n\t\tif ( useLabels ) {\n\t\t\tpreAttributes[ 'data-language' ] = languagesToLabels[ codeBlockLanguage ];\n\t\t\tpreAttributes.spellcheck = 'false';\n\t\t}\n\n\t\tconst codeAttributes = languagesToClasses[ codeBlockLanguage ] ? {\n\t\t\tclass: languagesToClasses[ codeBlockLanguage ]\n\t\t} : undefined;\n\t\tconst code = writer.createContainerElement( 'code', codeAttributes );\n\n\t\tconst pre = writer.createContainerElement( 'pre', preAttributes, code );\n\n\t\twriter.insert( targetViewPosition, pre );\n\n\t\tmapper.bindElements( data.item as ModelElement, code );\n\t};\n}\n\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <pre><code ...>foo();\\nbar();</code></pre>\n * ```\n *\n * @returns Returns a conversion callback.\n * @internal\n */\nexport function modelToDataViewSoftBreakInsertion( model: Model ): GetCallback<DowncastInsertEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.item.parent!.name !== 'codeBlock' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tif ( !consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = mapper.toViewPosition( model.createPositionBefore( data.item ) );\n\n\t\twriter.insert( position, writer.createText( '\\n' ) );\n\t};\n}\n\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();bar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();bar();</codeBlock>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @returns Returns a conversion callback.\n * @internal\n */\nexport function dataViewToModelCodeBlockInsertion(\n\teditingView: EditingView,\n\tlanguageDefs: Array<CodeBlockLanguageDefinition>\n): GetCallback<UpcastElementEvent> {\n\t// Language names associated with CSS classes:\n\t//\n\t//\t\t{\n\t//\t\t\t'language-php': 'php',\n\t//\t\t\t'language-python': 'python',\n\t//\t\t\tjs: 'javascript',\n\t//\t\t\t...\n\t//\t\t}\n\tconst classesToLanguages = getPropertyAssociation( languageDefs, 'class', 'language' );\n\tconst defaultLanguageName = languageDefs[ 0 ].language;\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewCodeElement = data.viewItem;\n\t\tconst viewPreElement = viewCodeElement.parent;\n\n\t\tif ( !viewPreElement || !viewPreElement.is( 'element', 'pre' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case of nested code blocks we don't want to convert to another code block.\n\t\tif ( data.modelCursor.findAncestor( 'codeBlock' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { consumable, writer } = conversionApi;\n\n\t\tif ( !consumable.test( viewCodeElement, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst codeBlock = writer.createElement( 'codeBlock' );\n\t\tconst viewChildClasses = [ ...viewCodeElement.getClassNames() ];\n\n\t\t// As we're to associate each class with a model language, a lack of class (empty class) can be\n\t\t// also associated with a language if the language definition was configured so. Pushing an empty\n\t\t// string to make sure the association will work.\n\t\tif ( !viewChildClasses.length ) {\n\t\t\tviewChildClasses.push( '' );\n\t\t}\n\n\t\t// Figure out if any of the <code> element's class names is a valid programming\n\t\t// language class. If so, use it on the model element (becomes the language of the entire block).\n\t\tfor ( const className of viewChildClasses ) {\n\t\t\tconst language = classesToLanguages[ className ];\n\n\t\t\tif ( language ) {\n\t\t\t\tconsumable.consume( viewCodeElement, { classes: [ className ] } );\n\t\t\t\twriter.setAttribute( 'language', language, codeBlock );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If no language value was set, use the default language from the config.\n\t\tif ( !codeBlock.hasAttribute( 'language' ) ) {\n\t\t\twriter.setAttribute( 'language', defaultLanguageName, codeBlock );\n\t\t}\n\n\t\t// Convert children before inserting the code block element\n\t\t// to make sure that code block won't be splitted by any block.\n\t\tconversionApi.convertChildren( viewCodeElement, codeBlock );\n\n\t\t// Let's try to insert code block.\n\t\tif ( !conversionApi.safeInsert( codeBlock, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( viewCodeElement, { name: true } );\n\n\t\tconversionApi.updateConversionResult( codeBlock, data );\n\t};\n}\n\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * @returns {Function} Returns a conversion callback.\n * @internal\n */\nexport function dataViewToModelTextNewlinesInsertion(): GetCallback<UpcastTextEvent> {\n\treturn ( evt, data, { consumable, writer } ) => {\n\t\tlet position = data.modelCursor;\n\n\t\t// When node is already converted then do nothing.\n\t\tif ( !consumable.test( data.viewItem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When not inside `codeBlock` then do nothing.\n\t\tif ( !position.findAncestor( 'codeBlock' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.viewItem );\n\n\t\tconst text = data.viewItem.data;\n\t\tconst textLines = text.split( '\\n' ).map( data => writer.createText( data ) );\n\t\tconst lastLine = textLines[ textLines.length - 1 ];\n\n\t\tfor ( const node of textLines ) {\n\t\t\twriter.insert( node, position );\n\t\t\tposition = position.getShiftedBy( node.offsetSize );\n\n\t\t\tif ( node !== lastLine ) {\n\t\t\t\tconst softBreak = writer.createElement( 'softBreak' );\n\n\t\t\t\twriter.insert( softBreak, position );\n\t\t\t\tposition = writer.createPositionAfter( softBreak );\n\t\t\t}\n\t\t}\n\n\t\tdata.modelRange = writer.createRange(\n\t\t\tdata.modelCursor,\n\t\t\tposition\n\t\t);\n\t\tdata.modelCursor = position;\n\t};\n}\n\n/**\n * A view-to-model converter that handles orphan text nodes (white spaces, new lines, etc.)\n * that surround `<code>` inside `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * // White spaces\n * <pre> <code>foo()</code> </pre>\n *\n * // White spaces\n * <pre>      <code>foo()</code>      </pre>\n *\n * // White spaces\n * <pre>\t\t\t<code>foo()</code>\t\t\t</pre>\n *\n * // New lines\n * <pre>\n * \t<code>foo()</code>\n * </pre>\n *\n * // Redundant text\n * <pre>ABC<code>foo()</code>DEF</pre>\n * ```\n *\n * Unified output for each case:\n *\n * ```html\n * <codeBlock language=\"plaintext\">foo()</codeBlock>\n * ```\n *\n * @returns Returns a conversion callback.\n * @internal\n */\nexport function dataViewToModelOrphanNodeConsumer(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, { consumable } ) => {\n\t\tconst preElement = data.viewItem;\n\n\t\t// Don't clean up nested pre elements. Their content should stay as it is, they are not upcasted\n\t\t// to code blocks.\n\t\tif ( preElement.findAncestor( 'pre' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst preChildren = Array.from( preElement.getChildren() );\n\t\tconst childCodeElement = preChildren.find( node => node.is( 'element', 'code' ) );\n\n\t\t// <code>-less <pre>. It will not upcast to code block in the model, skipping.\n\t\tif ( !childCodeElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const child of preChildren ) {\n\t\t\tif ( child === childCodeElement || !child.is( '$text' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Consuming the orphan to remove it from the input data.\n\t\t\t// Second argument in `consumable.consume` is discarded for text nodes.\n\t\t\tconsumable.consume( child, { name: true } );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/codeblockediting\n */\n\nimport { Plugin, type Editor, type MultiCommand } from 'ckeditor5/src/core.js';\nimport { ShiftEnter, type ViewDocumentEnterEvent } from 'ckeditor5/src/enter.js';\n\nimport {\n\tViewUpcastWriter,\n\ttype ModelRange,\n\ttype ModelNode,\n\ttype ModelGetSelectedContentEvent,\n\ttype ViewDocumentTabEvent,\n\ttype DowncastInsertEvent,\n\ttype UpcastElementEvent,\n\ttype UpcastTextEvent,\n\ttype ModelElement,\n\ttype ModelSelectionChangeRangeEvent\n} from 'ckeditor5/src/engine.js';\nimport { ClipboardPipeline, type ClipboardContentInsertionEvent } from 'ckeditor5/src/clipboard.js';\n\nimport { CodeBlockCommand } from './codeblockcommand.js';\nimport { IndentCodeBlockCommand } from './indentcodeblockcommand.js';\nimport { OutdentCodeBlockCommand } from './outdentcodeblockcommand.js';\nimport {\n\tgetNormalizedAndLocalizedLanguageDefinitions,\n\tgetLeadingWhiteSpaces,\n\trawSnippetTextToViewDocumentFragment,\n\tgetCodeBlockAriaAnnouncement,\n\tgetTextNodeAtLineStart\n} from './utils.js';\nimport {\n\tmodelToViewCodeBlockInsertion,\n\tmodelToDataViewSoftBreakInsertion,\n\tdataViewToModelCodeBlockInsertion,\n\tdataViewToModelTextNewlinesInsertion,\n\tdataViewToModelOrphanNodeConsumer\n} from './converters.js';\n\nconst DEFAULT_ELEMENT = 'paragraph';\n\n/**\n * The editing part of the code block feature.\n *\n * Introduces the `'codeBlock'` command and the `'codeBlock'` model element.\n */\nexport class CodeBlockEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlockEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ShiftEnter ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'codeBlock', {\n\t\t\tlanguages: [\n\t\t\t\t{ language: 'plaintext', label: 'Plain text' },\n\t\t\t\t{ language: 'c', label: 'C' },\n\t\t\t\t{ language: 'cs', label: 'C#' },\n\t\t\t\t{ language: 'cpp', label: 'C++' },\n\t\t\t\t{ language: 'css', label: 'CSS' },\n\t\t\t\t{ language: 'diff', label: 'Diff' },\n\t\t\t\t{ language: 'go', label: 'Go' },\n\t\t\t\t{ language: 'html', label: 'HTML' },\n\t\t\t\t{ language: 'java', label: 'Java' },\n\t\t\t\t{ language: 'javascript', label: 'JavaScript' },\n\t\t\t\t{ language: 'php', label: 'PHP' },\n\t\t\t\t{ language: 'python', label: 'Python' },\n\t\t\t\t{ language: 'ruby', label: 'Ruby' },\n\t\t\t\t{ language: 'typescript', label: 'TypeScript' },\n\t\t\t\t{ language: 'xml', label: 'XML' }\n\t\t\t],\n\n\t\t\t// A single tab.\n\t\t\tindentSequence: '\\t'\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\n\t\tconst normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\n\t\t// The main command.\n\t\teditor.commands.add( 'codeBlock', new CodeBlockCommand( editor ) );\n\n\t\t// Commands that change the indentation.\n\t\teditor.commands.add( 'indentCodeBlock', new IndentCodeBlockCommand( editor ) );\n\t\teditor.commands.add( 'outdentCodeBlock', new OutdentCodeBlockCommand( editor ) );\n\n\t\tthis.listenTo<ViewDocumentTabEvent>( view.document, 'tab', ( evt, data ) => {\n\t\t\tconst commandName = data.shiftKey ? 'outdentCodeBlock' : 'indentCodeBlock';\n\t\t\tconst command: OutdentCodeBlockCommand | IndentCodeBlockCommand = editor.commands.get( commandName )!;\n\n\t\t\tif ( !command.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( commandName );\n\n\t\t\tdata.stopPropagation();\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'pre' } );\n\n\t\tschema.register( 'codeBlock', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowChildren: '$text',\n\t\t\t// Disallow `$inlineObject` and its derivatives like `inlineWidget` inside `codeBlock` to ensure that only text,\n\t\t\t// not other inline elements like inline images, are allowed. This maintains the semantic integrity of code blocks.\n\t\t\tdisallowChildren: '$inlineObject',\n\t\t\tallowAttributes: [ 'language' ],\n\t\t\tallowAttributesOf: '$listItem',\n\t\t\tisBlock: true\n\t\t} );\n\n\t\t// Disallow formatting attributes on `codeBlock` children.\n\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t\t\tconst parent = context.getItem( context.length - 2 );\n\t\t\tconst isFormatting = schema.getAttributeProperties( attributeName ).isFormatting;\n\n\t\t\tif ( isFormatting && parent && parent.name == 'codeBlock' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Conversion.\n\t\teditor.editing.downcastDispatcher.on<DowncastInsertEvent>(\n\t\t\t'insert:codeBlock',\n\t\t\tmodelToViewCodeBlockInsertion( model, normalizedLanguagesDefs, true )\n\t\t);\n\t\teditor.data.downcastDispatcher.on<DowncastInsertEvent>(\n\t\t\t'insert:codeBlock',\n\t\t\tmodelToViewCodeBlockInsertion( model, normalizedLanguagesDefs )\n\t\t);\n\t\teditor.data.downcastDispatcher.on<DowncastInsertEvent>(\n\t\t\t'insert:softBreak',\n\t\t\tmodelToDataViewSoftBreakInsertion( model ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\teditor.data.upcastDispatcher.on<UpcastElementEvent>(\n\t\t\t'element:code',\n\t\t\tdataViewToModelCodeBlockInsertion( view, normalizedLanguagesDefs )\n\t\t);\n\t\teditor.data.upcastDispatcher.on<UpcastTextEvent>( 'text', dataViewToModelTextNewlinesInsertion() );\n\t\teditor.data.upcastDispatcher.on<UpcastElementEvent>( 'element:pre', dataViewToModelOrphanNodeConsumer(), { priority: 'high' } );\n\n\t\t// Intercept the clipboard input (paste) when the selection is anchored in the code block and force the clipboard\n\t\t// data to be pasted as a single plain text. Otherwise, the code lines will split the code block and\n\t\t// \"spill out\" as separate paragraphs.\n\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n\t\t\tlet insertionRange = model.createRange( model.document.selection.anchor! );\n\n\t\t\t// Use target ranges in case this is a drop.\n\t\t\tif ( data.targetRanges ) {\n\t\t\t\tinsertionRange = editor.editing.mapper.toModelRange( data.targetRanges[ 0 ] );\n\t\t\t}\n\n\t\t\tif ( !insertionRange.start.parent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst text = data.dataTransfer.getData( 'text/plain' );\n\t\t\tconst writer = new ViewUpcastWriter( editor.editing.view.document );\n\n\t\t\t// Pass the view fragment to the default clipboardInput handler.\n\t\t\tdata.content = rawSnippetTextToViewDocumentFragment( writer, text );\n\t\t} );\n\n\t\tif ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n\t\t\t// Elements may have a plain textual representation (hence be present in the 'text/plain' data transfer),\n\t\t\t// but not be allowed in the code block.\n\t\t\t// Filter them out before inserting the content to the model.\n\t\t\teditor.plugins.get( ClipboardPipeline ).on<ClipboardContentInsertionEvent>( 'contentInsertion', ( evt, data ) => {\n\t\t\t\tconst model = editor.model;\n\t\t\t\tconst selection = model.document.selection;\n\n\t\t\t\tif ( !selection.anchor!.parent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tconst contentRange = writer.createRangeIn( data.content );\n\n\t\t\t\t\tfor ( const item of [ ...contentRange.getItems() ] ) {\n\t\t\t\t\t\t// Remove all nodes disallowed in the code block.\n\t\t\t\t\t\tif ( item.is( 'node' ) && !schema.checkChild( selection.anchor!, item ) ) {\n\t\t\t\t\t\t\twriter.remove( item );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\n\t\t// Make sure multi–line selection is always wrapped in a code block when `getSelectedContent()`\n\t\t// is used (e.g. clipboard copy). Otherwise, only the raw text will be copied to the clipboard and,\n\t\t// upon next paste, this bare text will not be inserted as a code block, which is not the best UX.\n\t\t// Similarly, when the selection in a single line, the selected content should be an inline code\n\t\t// so it can be pasted later on and retain it's preformatted nature.\n\t\tthis.listenTo<ModelGetSelectedContentEvent>( model, 'getSelectedContent', ( evt, [ selection ] ) => {\n\t\t\tconst anchor = selection.anchor!;\n\n\t\t\tif ( selection.isCollapsed || !anchor.parent.is( 'element', 'codeBlock' ) || !anchor.hasSameParentAs( selection.focus! ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => {\n\t\t\t\tconst docFragment = evt.return!;\n\n\t\t\t\t// fo[o<softBreak></softBreak>b]ar  ->   <codeBlock language=\"...\">[o<softBreak></softBreak>b]<codeBlock>\n\t\t\t\tif (\n\t\t\t\t\tanchor.parent.is( 'element' ) &&\n\t\t\t\t\t( docFragment.childCount > 1 || selection.containsEntireContent( anchor.parent ) )\n\t\t\t\t) {\n\t\t\t\t\tconst codeBlock = writer.createElement( 'codeBlock', anchor.parent.getAttributes() );\n\t\t\t\t\twriter.append( docFragment, codeBlock );\n\n\t\t\t\t\tconst newDocumentFragment = writer.createDocumentFragment();\n\t\t\t\t\twriter.append( codeBlock, newDocumentFragment );\n\n\t\t\t\t\tevt.return = newDocumentFragment;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// \"f[oo]\"                          ->   <$text code=\"true\">oo</text>\n\t\t\t\tconst textNode = docFragment.getChild( 0 )!;\n\n\t\t\t\tif ( schema.checkAttribute( textNode, 'code' ) ) {\n\t\t\t\t\twriter.setAttribute( 'code', true, textNode );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst commands = editor.commands;\n\t\tconst indent = commands.get( 'indent' );\n\t\tconst outdent = commands.get( 'outdent' );\n\n\t\tif ( indent ) {\n\t\t\t// Priority is highest due to integration with `IndentList` command of `List` plugin.\n\t\t\t// If selection is in a code block we give priority to it. This way list item cannot be indented\n\t\t\t// but if we would give priority to indenting list item then user would have to indent list item\n\t\t\t// as much as possible and only then he could indent code block.\n\t\t\t( indent as MultiCommand ).registerChildCommand( commands.get( 'indentCodeBlock' )!, { priority: 'highest' } );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\t( outdent as MultiCommand ).registerChildCommand( commands.get( 'outdentCodeBlock' )! );\n\t\t}\n\n\t\t// Customize the response to the <kbd>Enter</kbd> and <kbd>Shift</kbd>+<kbd>Enter</kbd>\n\t\t// key press when the selection is in the code block. Upon enter key press we can either\n\t\t// leave the block if it's \"two or three enters\" in a row or create a new code block line, preserving\n\t\t// previous line's indentation.\n\t\tthis.listenTo<ViewDocumentEnterEvent>( editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst positionParent = editor.model.document.selection.getLastPosition()!.parent;\n\n\t\t\tif ( !positionParent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !leaveBlockStartOnEnter( editor, data.isSoft ) && !leaveBlockEndOnEnter( editor, data.isSoft ) ) {\n\t\t\t\tbreakLineOnEnter( editor );\n\t\t\t}\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'pre' } );\n\n\t\tthis._initAriaAnnouncements( );\n\t}\n\n\t/**\n\t * Observe when user enters or leaves code block and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified code block.\n\t *\n\t * @internal\n\t */\n\tprivate _initAriaAnnouncements( ) {\n\t\tconst { model, ui, t } = this.editor;\n\t\tconst languageDefs = getNormalizedAndLocalizedLanguageDefinitions( this.editor );\n\n\t\tlet lastFocusedCodeBlock: ModelElement | null = null;\n\n\t\tmodel.document.selection.on<ModelSelectionChangeRangeEvent>( 'change:range', () => {\n\t\t\tconst focusParent = model.document.selection.focus!.parent;\n\n\t\t\tif ( !ui || lastFocusedCodeBlock === focusParent || !focusParent.is( 'element' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( lastFocusedCodeBlock && lastFocusedCodeBlock.is( 'element', 'codeBlock' ) ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( getCodeBlockAriaAnnouncement( t, languageDefs, lastFocusedCodeBlock, 'leave' ) );\n\t\t\t}\n\n\t\t\tif ( focusParent.is( 'element', 'codeBlock' ) ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( getCodeBlockAriaAnnouncement( t, languageDefs, focusParent, 'enter' ) );\n\t\t\t}\n\n\t\t\tlastFocusedCodeBlock = focusParent;\n\t\t} );\n\t}\n}\n\n/**\n * Normally, when the Enter (or Shift+Enter) key is pressed, a soft line break is to be added to the\n * code block. Let's try to follow the indentation of the previous line when possible, for instance:\n *\n * ```html\n * // Before pressing enter (or shift enter)\n * <codeBlock>\n * \"    foo()\"[]                   // Indent of 4 spaces.\n * </codeBlock>\n *\n * // After pressing:\n * <codeBlock>\n * \"    foo()\"                 // Indent of 4 spaces.\n * <softBreak></softBreak>     // A new soft break created by pressing enter.\n * \"    \"[]                    // Retain the indent of 4 spaces.\n * </codeBlock>\n * ```\n */\nfunction breakLineOnEnter( editor: Editor ): void {\n\tconst model = editor.model;\n\tconst modelDoc = model.document;\n\t// Use last position as other mechanisms (e.g. condition deciding whether this function should be called) also check that.\n\tconst lastSelectionPosition = modelDoc.selection.getLastPosition()!;\n\tlet leadingWhiteSpaces: string | undefined;\n\n\tconst node = getTextNodeAtLineStart( lastSelectionPosition, model );\n\n\t// Figure out the indentation (white space chars) at the beginning of the line.\n\tif ( node && node.is( '$text' ) ) {\n\t\tleadingWhiteSpaces = getLeadingWhiteSpaces( node );\n\t}\n\n\t// Keeping everything in a change block for a single undo step.\n\teditor.model.change( writer => {\n\t\teditor.execute( 'shiftEnter' );\n\n\t\t// If the line before being broken in two had some indentation, let's retain it\n\t\t// in the new line.\n\t\tif ( leadingWhiteSpaces ) {\n\t\t\twriter.insertText( leadingWhiteSpaces, modelDoc.selection.anchor! );\n\t\t}\n\t} );\n}\n\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the beginning\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>[]<softBreak></softBreak>foo</codeBlock>\n *\n * // After pressing:\n * <paragraph>[]</paragraph><codeBlock>foo</codeBlock>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */\nfunction leaveBlockStartOnEnter( editor: Editor, isSoftEnter: boolean ): boolean {\n\tconst model = editor.model;\n\tconst modelDoc = model.document;\n\tconst view = editor.editing.view;\n\tconst lastSelectionPosition = modelDoc.selection.getLastPosition()!;\n\tconst nodeAfter = lastSelectionPosition.nodeAfter;\n\n\tif ( isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtStart ) {\n\t\treturn false;\n\t}\n\n\tif ( !isSoftBreakNode( nodeAfter ) ) {\n\t\treturn false;\n\t}\n\n\t// We're doing everything in a single change block to have a single undo step.\n\teditor.model.change( writer => {\n\t\t// \"Clone\" the <codeBlock> in the standard way.\n\t\teditor.execute( 'enter' );\n\n\t\t// The cloned block exists now before the original code block.\n\t\tconst newBlock = modelDoc.selection.anchor!.parent.previousSibling! as ModelElement;\n\n\t\t// Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n\t\twriter.rename( newBlock, DEFAULT_ELEMENT );\n\t\twriter.setSelection( newBlock, 'in' );\n\t\teditor.model.schema.removeDisallowedAttributes( [ newBlock ], writer );\n\n\t\t// Remove the <softBreak> that originally followed the selection position.\n\t\twriter.remove( nodeAfter! );\n\t} );\n\n\t// Eye candy.\n\tview.scrollToTheSelection();\n\n\treturn true;\n}\n\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the end\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>foo[]</codeBlock>\n *\n * // After first press:\n * <codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n *\n * // After second press:\n * <codeBlock>foo</codeBlock><paragraph>[]</paragraph>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */\nfunction leaveBlockEndOnEnter( editor: Editor, isSoftEnter: boolean ): boolean {\n\tconst model = editor.model;\n\tconst modelDoc = model.document;\n\tconst view = editor.editing.view;\n\tconst lastSelectionPosition = modelDoc.selection.getLastPosition()!;\n\tconst nodeBefore = lastSelectionPosition.nodeBefore;\n\n\tlet emptyLineRangeToRemoveOnEnter: ModelRange;\n\n\tif ( isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtEnd || !nodeBefore || !nodeBefore.previousSibling ) {\n\t\treturn false;\n\t}\n\n\t// When the position is directly preceded by two soft breaks\n\t//\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>[]</codeBlock>\n\t//\n\t// it creates the following range that will be cleaned up before leaving:\n\t//\n\t//\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>]</codeBlock>\n\t//\n\tif ( isSoftBreakNode( nodeBefore ) && isSoftBreakNode( nodeBefore.previousSibling ) ) {\n\t\temptyLineRangeToRemoveOnEnter = model.createRange(\n\t\t\tmodel.createPositionBefore( nodeBefore.previousSibling ), model.createPositionAfter( nodeBefore )\n\t\t);\n\t}\n\n\t// When there's some text before the position that is\n\t// preceded by two soft breaks and made purely of white–space characters\n\t//\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>    []</codeBlock>\n\t//\n\t// it creates the following range to clean up before leaving:\n\t//\n\t//\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>    ]</codeBlock>\n\t//\n\telse if (\n\t\tisEmptyishTextNode( nodeBefore ) &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling ) &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling.previousSibling )\n\t) {\n\t\temptyLineRangeToRemoveOnEnter = model.createRange(\n\t\t\tmodel.createPositionBefore( nodeBefore.previousSibling.previousSibling! ), model.createPositionAfter( nodeBefore )\n\t\t);\n\t}\n\n\t// When there's some text before the position that is made purely of white–space characters\n\t// and is preceded by some other text made purely of white–space characters\n\t//\n\t//\t\t<codeBlock>foo<softBreak></softBreak>    <softBreak></softBreak>    []</codeBlock>\n\t//\n\t// it creates the following range to clean up before leaving:\n\t//\n\t//\t\t<codeBlock>foo[<softBreak></softBreak>    <softBreak></softBreak>    ]</codeBlock>\n\t//\n\telse if (\n\t\tisEmptyishTextNode( nodeBefore ) &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling ) &&\n\t\tisEmptyishTextNode( nodeBefore.previousSibling.previousSibling ) &&\n\t\tnodeBefore.previousSibling.previousSibling &&\n\t\tisSoftBreakNode( nodeBefore.previousSibling.previousSibling.previousSibling )\n\t) {\n\t\temptyLineRangeToRemoveOnEnter = model.createRange(\n\t\t\tmodel.createPositionBefore( nodeBefore.previousSibling.previousSibling.previousSibling! ),\n\t\t\tmodel.createPositionAfter( nodeBefore )\n\t\t);\n\t}\n\n\t// Not leaving the block in the following cases:\n\t//\n\t//\t\t<codeBlock>    []</codeBlock>\n\t//\t\t<codeBlock>  a []</codeBlock>\n\t//\t\t<codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>bar[]</codeBlock>\n\t//\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak> a []</codeBlock>\n\t//\n\telse {\n\t\treturn false;\n\t}\n\n\t// We're doing everything in a single change block to have a single undo step.\n\teditor.model.change( writer => {\n\t\t// Remove the last <softBreak>s and all white space characters that followed them.\n\t\twriter.remove( emptyLineRangeToRemoveOnEnter );\n\n\t\t// \"Clone\" the <codeBlock> in the standard way.\n\t\teditor.execute( 'enter' );\n\n\t\tconst newBlock = modelDoc.selection.anchor!.parent as ModelElement;\n\n\t\t// Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n\t\twriter.rename( newBlock, DEFAULT_ELEMENT );\n\t\teditor.model.schema.removeDisallowedAttributes( [ newBlock ], writer );\n\t} );\n\n\t// Eye candy.\n\tview.scrollToTheSelection();\n\n\treturn true;\n}\n\nfunction isEmptyishTextNode( node: ModelNode | null ) {\n\treturn node && node.is( '$text' ) && !node.data.match( /\\S/ );\n}\n\nfunction isSoftBreakNode( node: ModelNode | null ) {\n\treturn node && node.is( 'element', 'softBreak' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/codeblockui\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { Collection } from 'ckeditor5/src/utils.js';\nimport {\n\tUIModel,\n\tSplitButtonView,\n\tcreateDropdown,\n\taddListToDropdown,\n\tMenuBarMenuListItemButtonView,\n\tMenuBarMenuListView,\n\tMenuBarMenuView,\n\tMenuBarMenuListItemView,\n\ttype ListDropdownButtonDefinition\n} from 'ckeditor5/src/ui.js';\nimport { IconCodeBlock } from 'ckeditor5/src/icons.js';\n\nimport { getNormalizedAndLocalizedLanguageDefinitions } from './utils.js';\n\nimport type { CodeBlockLanguageDefinition } from './codeblockconfig.js';\nimport { type CodeBlockCommand } from './codeblockcommand.js';\n\nimport '../theme/codeblock.css';\n\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n */\nexport class CodeBlockUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlockUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst componentFactory = editor.ui.componentFactory;\n\t\tconst normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions( editor );\n\t\tconst itemDefinitions = this._getLanguageListItemDefinitions( normalizedLanguageDefs );\n\t\tconst command: CodeBlockCommand = editor.commands.get( 'codeBlock' )!;\n\n\t\tcomponentFactory.add( 'codeBlock', locale => {\n\t\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\t\tconst splitButtonView = dropdownView.buttonView;\n\t\t\tconst accessibleLabel = t( 'Insert code block' );\n\n\t\t\tsplitButtonView.set( {\n\t\t\t\tlabel: accessibleLabel,\n\t\t\t\ttooltip: true,\n\t\t\t\ticon: IconCodeBlock,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\tsplitButtonView.bind( 'isOn' ).to( command, 'value', value => !!value );\n\n\t\t\tsplitButtonView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\tusePreviousLanguageChoice: true\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.on( 'execute', evt => {\n\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\tlanguage: ( evt.source as any )._codeBlockLanguage,\n\t\t\t\t\tforceValue: true\n\t\t\t\t} );\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tdropdownView.class = 'ck-code-block-dropdown';\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\taddListToDropdown( dropdownView, itemDefinitions, {\n\t\t\t\trole: 'menu',\n\t\t\t\tariaLabel: accessibleLabel\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\tcomponentFactory.add( 'menuBar:codeBlock', locale => {\n\t\t\tconst menuView = new MenuBarMenuView( locale );\n\n\t\t\tmenuView.buttonView.set( {\n\t\t\t\trole: 'menuitem',\n\t\t\t\tlabel: t( 'Code block' ),\n\t\t\t\ticon: IconCodeBlock\n\t\t\t} );\n\n\t\t\tmenuView.bind( 'isEnabled' ).to( command );\n\n\t\t\tconst listView = new MenuBarMenuListView( locale );\n\n\t\t\tlistView.set( {\n\t\t\t\tariaLabel: t( 'Insert code block' )\n\t\t\t} );\n\n\t\t\tfor ( const definition of itemDefinitions ) {\n\t\t\t\tconst listItemView = new MenuBarMenuListItemView( locale, menuView );\n\t\t\t\tconst buttonView = new MenuBarMenuListItemButtonView( locale );\n\n\t\t\t\tbuttonView.bind( ...Object.keys( definition.model ) as Array<keyof MenuBarMenuListItemButtonView> ).to( definition.model );\n\t\t\t\tbuttonView.set( {\n\t\t\t\t\tisToggleable: true,\n\t\t\t\t\trole: 'menuitemcheckbox'\n\t\t\t\t} );\n\n\t\t\t\tbuttonView.delegate( 'execute' ).to( menuView );\n\n\t\t\t\tbuttonView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'codeBlock', {\n\t\t\t\t\t\tlanguage: definition.model._codeBlockLanguage as string,\n\t\t\t\t\t\tforceValue: command.value == definition.model._codeBlockLanguage ? false : true\n\t\t\t\t\t} );\n\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\n\t\t\t\tlistItemView.children.add( buttonView );\n\t\t\t\tlistView.items.add( listItemView );\n\t\t\t}\n\n\t\t\tmenuView.panelView.children.add( listView );\n\n\t\t\treturn menuView;\n\t\t} );\n\t}\n\n\t/**\n\t * A helper returning a collection of the `codeBlock` dropdown items representing languages\n\t * available for the user to choose from.\n\t */\n\tprivate _getLanguageListItemDefinitions(\n\t\tnormalizedLanguageDefs: Array<CodeBlockLanguageDefinition>\n\t): Collection<ListDropdownButtonDefinition> {\n\t\tconst editor = this.editor;\n\t\tconst command: CodeBlockCommand = editor.commands.get( 'codeBlock' )!;\n\t\tconst itemDefinitions = new Collection<ListDropdownButtonDefinition>();\n\n\t\tfor ( const languageDef of normalizedLanguageDefs ) {\n\t\t\tconst definition: ListDropdownButtonDefinition = {\n\t\t\t\ttype: 'button',\n\t\t\t\tmodel: new UIModel( {\n\t\t\t\t\t_codeBlockLanguage: languageDef.language,\n\t\t\t\t\tlabel: languageDef.label,\n\t\t\t\t\trole: 'menuitemradio',\n\t\t\t\t\twithText: true\n\t\t\t\t} )\n\t\t\t};\n\n\t\t\tdefinition.model.bind( 'isOn' ).to( command, 'value', value => {\n\t\t\t\treturn value === definition.model._codeBlockLanguage;\n\t\t\t} );\n\n\t\t\titemDefinitions.add( definition );\n\t\t}\n\n\t\treturn itemDefinitions;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module code-block/codeblock\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { CodeBlockEditing } from './codeblockediting.js';\nimport { CodeBlockUI } from './codeblockui.js';\n\n/**\n * The code block plugin.\n *\n * For more information about this feature check the {@glink api/code-block package page} and the\n * {@glink features/code-blocks code block} feature guide.\n *\n * This is a \"glue\" plugin that loads the {@link module:code-block/codeblockediting~CodeBlockEditing code block editing feature}\n * and the {@link module:code-block/codeblockui~CodeBlockUI code block UI feature}.\n */\nexport class CodeBlock extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ CodeBlockEditing, CodeBlockUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'CodeBlock' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n"]}